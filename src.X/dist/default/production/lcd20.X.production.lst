

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Thu Feb 08 10:56:59 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 1.44
    33                           ; Generated 14/09/2017 GMT
    34                           ; 
    35                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F887 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0014                     	;# 
    88  0015                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001D                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  0087                     	;# 
   105  0088                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  008F                     	;# 
   111  0090                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0093                     	;# 
   117  0094                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  009F                     	;# 
   129  0105                     	;# 
   130  0107                     	;# 
   131  0108                     	;# 
   132  0109                     	;# 
   133  010C                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  0185                     	;# 
   139  0187                     	;# 
   140  0188                     	;# 
   141  0189                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144                           
   145                           	psect	idataBANK0
   146  0241                     __pidataBANK0:	
   147                           
   148                           ;initializer for _line2_text_disp_finish_flag
   149  0241  3479               	retlw	121
   150                           
   151                           ;initializer for _line1_text_disp_finish_flag
   152  0242  3479               	retlw	121
   153                           
   154                           	psect	strings
   155  0003                     __pstrings:	
   156  0003                     stringtab:	
   157  0003                     __stringtab:	
   158  0003                     stringcode:	
   159                           ;	String table - string pointers are 1 byte each
   160                           
   161  0003                     stringdir:	
   162  0003  3000               	movlw	high stringdir
   163  0004  008A               	movwf	10
   164  0005  0804               	movf	4,w
   165  0006  0A84               	incf	4,f
   166  0007  0782               	addwf	2,f
   167  0008                     __stringbase:	
   168  0008  3400               	retlw	0
   169  0009                     __end_of__stringtab:	
   170  0009                     main@text_str_right:	
   171  0009  3457               	retlw	87
   172  000A  344F               	retlw	79
   173  000B  3452               	retlw	82
   174  000C  344C               	retlw	76
   175  000D  3444               	retlw	68
   176  000E  342E               	retlw	46
   177  000F  3400               	retlw	0
   178  0010                     __end_ofmain@text_str_right:	
   179  0010                     main@text_str_left:	
   180  0010  3448               	retlw	72
   181  0011  3445               	retlw	69
   182  0012  344C               	retlw	76
   183  0013  344C               	retlw	76
   184  0014  344F               	retlw	79
   185  0015  342E               	retlw	46
   186  0016  3400               	retlw	0
   187  0017                     __end_ofmain@text_str_left:	
   188  0008                     _PORTD	set	8
   189  0007                     _PORTC	set	7
   190  0040                     _RD0	set	64
   191  0041                     _RD1	set	65
   192  0042                     _RD2	set	66
   193  0088                     _TRISD	set	136
   194  0087                     _TRISC	set	135
   195                           
   196                           	psect	cinit
   197  07E1                     start_initialization:	
   198                           ; #config settings
   199                           
   200  07E1                     __initialization:	
   201                           
   202                           ; Initialize objects allocated to BANK0
   203  07E1  120A  118A  2241  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   204  07E6  00E4               	movwf	__pdataBANK0& (0+127)
   205  07E7  120A  118A  2242  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   206  07EC  00E5               	movwf	(__pdataBANK0+1)& (0+127)
   207                           
   208                           ; Clear objects allocated to BANK1
   209  07ED  1383               	bcf	3,7	;select IRP bank0
   210  07EE  30A0               	movlw	low __pbssBANK1
   211  07EF  0084               	movwf	4
   212  07F0  30DC               	movlw	low (__pbssBANK1+60)
   213  07F1  120A  118A  2243  120A  118A  	fcall	clear_ram0
   214                           
   215                           ; Clear objects allocated to BANK0
   216  07F6  3020               	movlw	low __pbssBANK0
   217  07F7  0084               	movwf	4
   218  07F8  3046               	movlw	low (__pbssBANK0+38)
   219  07F9  120A  118A  2243   	fcall	clear_ram0
   220  07FC                     end_of_initialization:	
   221                           ;End of C runtime variable initialization code
   222                           
   223  07FC                     __end_of__initialization:	
   224  07FC  0183               	clrf	3
   225  07FD  120A  118A  2C4C   	ljmp	_main	;jump to C main() function
   226                           
   227                           	psect	bssBANK0
   228  0020                     __pbssBANK0:	
   229  0020                     LCD_Running_Text_Display_Line2@cur_char_in_str_index:	
   230  0020                     	ds	2
   231  0022                     LCD_Running_Text_Display_Line1@cur_char_in_str_index:	
   232  0022                     	ds	2
   233  0024                     _read_command:	
   234  0024                     	ds	2
   235  0026                     _lcd_buffer_line2:	
   236  0026                     	ds	16
   237  0036                     _lcd_buffer_line1:	
   238  0036                     	ds	16
   239                           
   240                           	psect	dataBANK0
   241  0064                     __pdataBANK0:	
   242  0064                     _line2_text_disp_finish_flag:	
   243  0064                     	ds	1
   244  0065                     _line1_text_disp_finish_flag:	
   245  0065                     	ds	1
   246                           
   247                           	psect	bssBANK1
   248  00A0                     __pbssBANK1:	
   249  00A0                     LCD_Running_Text_Display_Line2@temp_text_str:	
   250  00A0                     	ds	30
   251  00BE                     LCD_Running_Text_Display_Line1@temp_text_str:	
   252  00BE                     	ds	30
   253                           
   254                           	psect	clrtext
   255  0243                     clear_ram0:	
   256                           ;	Called with FSR containing the base address, and
   257                           ;	W with the last address+1
   258                           
   259  0243  0064               	clrwdt	;clear the watchdog before getting into this loop
   260  0244                     clrloop0:	
   261  0244  0180               	clrf	0	;clear RAM location pointed to by FSR
   262  0245  0A84               	incf	4,f	;increment pointer
   263  0246  0604               	xorwf	4,w	;XOR with final address
   264  0247  1903               	btfsc	3,2	;have we reached the end yet?
   265  0248  3400               	retlw	0	;all done for this memory range, return
   266  0249  0604               	xorwf	4,w	;XOR again to restore value
   267  024A  2A44               	goto	clrloop0	;do the next byte
   268                           
   269                           	psect	cstackCOMMON
   270  0070                     __pcstackCOMMON:	
   271  0070                     ?_LCD_Init:	
   272  0070                     ?_memset:	
   273                           ; 1 bytes @ 0x0
   274                           
   275  0070                     ?_memcpy:	
   276                           ; 1 bytes @ 0x0
   277                           
   278  0070                     ?_Delay_Time_By_Count:	
   279                           ; 1 bytes @ 0x0
   280                           
   281  0070                     ?_main:	
   282                           ; 1 bytes @ 0x0
   283                           
   284  0070                     ?_LCD_Write_Pulse:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     ?_LCD_Read_Pulse:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0070                     ?_Check_LCD_Busy:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0070                     ?_Write_LCD_Data:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0070                     ?_strlen:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0070                     memcpy@s1:	
   300                           ; 2 bytes @ 0x0
   301                           
   302  0070                     memset@c:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     Delay_Time_By_Count@time_delay:	
   306                           ; 2 bytes @ 0x0
   307                           
   308                           
   309                           ; 4 bytes @ 0x0
   310  0070                     	ds	1
   311  0071                     memcpy@n:	
   312                           
   313                           ; 2 bytes @ 0x1
   314  0071                     	ds	1
   315  0072                     ??_strlen:	
   316  0072                     memset@n:	
   317                           ; 1 bytes @ 0x2
   318                           
   319                           
   320                           ; 2 bytes @ 0x2
   321  0072                     	ds	1
   322  0073                     ??_memcpy:	
   323                           
   324                           ; 1 bytes @ 0x3
   325  0073                     	ds	1
   326  0074                     ??_memset:	
   327  0074                     ??_Delay_Time_By_Count:	
   328                           ; 1 bytes @ 0x4
   329                           
   330  0074                     memcpy@tmp:	
   331                           ; 1 bytes @ 0x4
   332                           
   333                           
   334                           ; 1 bytes @ 0x4
   335  0074                     	ds	1
   336  0075                     memcpy@d:	
   337  0075                     memset@p:	
   338                           ; 1 bytes @ 0x5
   339                           
   340                           
   341                           ; 1 bytes @ 0x5
   342  0075                     	ds	1
   343  0076                     memcpy@s:	
   344  0076                     memset@p1:	
   345                           ; 1 bytes @ 0x6
   346                           
   347  0076                     strlen@cp:	
   348                           ; 1 bytes @ 0x6
   349                           
   350                           
   351                           ; 1 bytes @ 0x6
   352  0076                     	ds	1
   353  0077                     memcpy@d1:	
   354  0077                     strlen@s:	
   355                           ; 1 bytes @ 0x7
   356                           
   357                           
   358                           ; 1 bytes @ 0x7
   359  0077                     	ds	1
   360  0078                     ??_LCD_Write_Pulse:	
   361  0078                     ??_LCD_Read_Pulse:	
   362                           ; 1 bytes @ 0x8
   363                           
   364  0078                     ?_Write_LCD_Command_Cannot_Check_BF:	
   365                           ; 1 bytes @ 0x8
   366                           
   367  0078                     ?_Read_LCD_Command:	
   368                           ; 1 bytes @ 0x8
   369                           
   370  0078                     Write_LCD_Command_Cannot_Check_BF@lcd_cmd:	
   371                           ; 2 bytes @ 0x8
   372                           
   373                           
   374                           ; 2 bytes @ 0x8
   375  0078                     	ds	2
   376  007A                     ??_Read_LCD_Command:	
   377  007A                     ??_Write_LCD_Command_Cannot_Check_BF:	
   378                           ; 1 bytes @ 0xA
   379                           
   380                           
   381                           ; 1 bytes @ 0xA
   382  007A                     	ds	2
   383  007C                     ??_Check_LCD_Busy:	
   384  007C                     ?_Write_LCD_Command:	
   385                           ; 1 bytes @ 0xC
   386                           
   387  007C                     ??_Write_LCD_Data:	
   388                           ; 1 bytes @ 0xC
   389                           
   390  007C                     Write_LCD_Data@lcd_data:	
   391                           ; 1 bytes @ 0xC
   392                           
   393  007C                     Write_LCD_Command@lcd_cmd:	
   394                           ; 1 bytes @ 0xC
   395                           
   396                           
   397                           ; 2 bytes @ 0xC
   398  007C                     	ds	2
   399  007E                     ??_LCD_Init:	
   400  007E                     ??_main:	
   401                           ; 1 bytes @ 0xE
   402                           
   403  007E                     ??_Write_LCD_Command:	
   404                           ; 1 bytes @ 0xE
   405                           
   406  007E                     ??_LCD_Line_Select:	
   407                           ; 1 bytes @ 0xE
   408                           
   409                           
   410                           	psect	cstackBANK0
   411  0046                     __pcstackBANK0:	
   412                           ; 1 bytes @ 0xE
   413                           
   414  0046                     ?_LCD_Line_Select:	
   415  0046                     LCD_Line_Select@line:	
   416                           ; 1 bytes @ 0x0
   417                           
   418                           
   419                           ; 2 bytes @ 0x0
   420  0046                     	ds	2
   421  0048                     ?_Data_Str_LCD_Disp:	
   422  0048                     Data_Str_LCD_Disp@lcd_line_buffer_len:	
   423                           ; 1 bytes @ 0x2
   424                           
   425                           
   426                           ; 2 bytes @ 0x2
   427  0048                     	ds	2
   428  004A                     Data_Str_LCD_Disp@line:	
   429                           
   430                           ; 2 bytes @ 0x4
   431  004A                     	ds	2
   432  004C                     ??_Data_Str_LCD_Disp:	
   433                           
   434                           ; 1 bytes @ 0x6
   435  004C                     	ds	1
   436  004D                     Data_Str_LCD_Disp@lcd_line_buffer:	
   437                           
   438                           ; 1 bytes @ 0x7
   439  004D                     	ds	1
   440  004E                     Data_Str_LCD_Disp@cur_char_in_text_str_index:	
   441                           
   442                           ; 2 bytes @ 0x8
   443  004E                     	ds	2
   444  0050                     ?_LCD_Running_Text_Display_Line1:	
   445  0050                     ?_LCD_Running_Text_Display_Line2:	
   446                           ; 1 bytes @ 0xA
   447                           
   448  0050                     LCD_Running_Text_Display_Line1@text_str_len:	
   449                           ; 1 bytes @ 0xA
   450                           
   451  0050                     LCD_Running_Text_Display_Line2@text_str_len:	
   452                           ; 2 bytes @ 0xA
   453                           
   454                           
   455                           ; 2 bytes @ 0xA
   456  0050                     	ds	2
   457  0052                     LCD_Running_Text_Display_Line1@num_gaps_between_text_str:	
   458  0052                     LCD_Running_Text_Display_Line2@num_gaps_between_text_str:	
   459                           ; 2 bytes @ 0xC
   460                           
   461                           
   462                           ; 2 bytes @ 0xC
   463  0052                     	ds	2
   464  0054                     LCD_Running_Text_Display_Line1@running_text_shift_direction:	
   465  0054                     LCD_Running_Text_Display_Line2@running_text_shift_direction:	
   466                           ; 2 bytes @ 0xE
   467                           
   468                           
   469                           ; 2 bytes @ 0xE
   470  0054                     	ds	2
   471  0056                     ??_LCD_Running_Text_Display_Line1:	
   472  0056                     ??_LCD_Running_Text_Display_Line2:	
   473                           ; 1 bytes @ 0x10
   474                           
   475                           
   476                           ; 1 bytes @ 0x10
   477  0056                     	ds	5
   478  005B                     LCD_Running_Text_Display_Line1@text_str:	
   479  005B                     LCD_Running_Text_Display_Line2@text_str:	
   480                           ; 1 bytes @ 0x15
   481                           
   482                           
   483                           ; 1 bytes @ 0x15
   484  005B                     	ds	1
   485  005C                     LCD_Running_Text_Display_Line1@cur_temp_index:	
   486  005C                     LCD_Running_Text_Display_Line2@cur_temp_index:	
   487                           ; 2 bytes @ 0x16
   488                           
   489                           
   490                           ; 2 bytes @ 0x16
   491  005C                     	ds	2
   492  005E                     LCD_Running_Text_Display_Line1@cur_lcd_col:	
   493  005E                     LCD_Running_Text_Display_Line2@cur_lcd_col:	
   494                           ; 2 bytes @ 0x18
   495                           
   496                           
   497                           ; 2 bytes @ 0x18
   498  005E                     	ds	2
   499  0060                     main@text_str_left_len:	
   500                           
   501                           ; 2 bytes @ 0x1A
   502  0060                     	ds	2
   503  0062                     main@text_str_right_len:	
   504                           
   505                           ; 2 bytes @ 0x1C
   506  0062                     	ds	2
   507                           
   508                           	psect	maintext
   509  044C                     __pmaintext:	
   510 ;;
   511 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   512 ;;
   513 ;; *************** function _main *****************
   514 ;; Defined at:
   515 ;;		line 63 in file "lcd_20.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;		None
   518 ;; Auto vars:     Size  Location     Type
   519 ;;  text_str_rig    2   28[BANK0 ] unsigned int 
   520 ;;  text_str_lef    2   26[BANK0 ] unsigned int 
   521 ;; Return value:  Size  Location     Type
   522 ;;                  1    wreg      void 
   523 ;; Registers used:
   524 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   525 ;; Tracked objects:
   526 ;;		On entry : B00/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   530 ;;      Params:         0       0       0       0       0
   531 ;;      Locals:         0       4       0       0       0
   532 ;;      Temps:          0       0       0       0       0
   533 ;;      Totals:         0       4       0       0       0
   534 ;;Total ram usage:        4 bytes
   535 ;; Hardware stack levels required when called:    8
   536 ;; This function calls:
   537 ;;		_LCD_Init
   538 ;;		_LCD_Running_Text_Display_Line1
   539 ;;		_LCD_Running_Text_Display_Line2
   540 ;;		_memset
   541 ;;		_strlen
   542 ;; This function is called by:
   543 ;;		Startup code after reset
   544 ;; This function uses a non-reentrant model
   545 ;;
   546                           
   547                           
   548                           ;psect for function _main
   549  044C                     _main:	
   550                           
   551                           ;lcd_20.c: 66: const char text_str_left[] = {"HELLO."};
   552                           ;lcd_20.c: 67: const char text_str_right[] = {"WORLD."};
   553                           ;lcd_20.c: 68: unsigned int text_str_left_len, text_str_right_len;
   554                           ;lcd_20.c: 70: TRISC = 0x00;
   555                           
   556                           ;incstack = 0
   557                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   558  044C  1683               	bsf	3,5	;RP0=1, select bank1
   559  044D  1303               	bcf	3,6	;RP1=0, select bank1
   560  044E  0187               	clrf	7	;volatile
   561                           
   562                           ;lcd_20.c: 71: PORTC = 0x00;
   563  044F  1283               	bcf	3,5	;RP0=0, select bank0
   564  0450  1303               	bcf	3,6	;RP1=0, select bank0
   565  0451  0187               	clrf	7	;volatile
   566                           
   567                           ;lcd_20.c: 72: TRISD = 0x00;
   568  0452  1683               	bsf	3,5	;RP0=1, select bank1
   569  0453  1303               	bcf	3,6	;RP1=0, select bank1
   570  0454  0188               	clrf	8	;volatile
   571                           
   572                           ;lcd_20.c: 73: PORTD = 0x00;
   573  0455  1283               	bcf	3,5	;RP0=0, select bank0
   574  0456  1303               	bcf	3,6	;RP1=0, select bank0
   575  0457  0188               	clrf	8	;volatile
   576                           
   577                           ;lcd_20.c: 75: LCD_Init();
   578  0458  120A  118A  23E7  120A  118A  	fcall	_LCD_Init
   579                           
   580                           ;lcd_20.c: 77: memset(lcd_buffer_line1, 0, (16U) );
   581  045D  3000               	movlw	0
   582  045E  00F0               	movwf	memset@c
   583  045F  00F1               	movwf	memset@c+1
   584  0460  3010               	movlw	16
   585  0461  00F2               	movwf	memset@n
   586  0462  3000               	movlw	0
   587  0463  00F3               	movwf	memset@n+1
   588  0464  3036               	movlw	(low (_lcd_buffer_line1| 0))& (0+255)
   589  0465  120A  118A  228D  120A  118A  	fcall	_memset
   590                           
   591                           ;lcd_20.c: 78: memset(lcd_buffer_line2, 0, (16U) );
   592  046A  3000               	movlw	0
   593  046B  00F0               	movwf	memset@c
   594  046C  00F1               	movwf	memset@c+1
   595  046D  3010               	movlw	16
   596  046E  00F2               	movwf	memset@n
   597  046F  3000               	movlw	0
   598  0470  00F3               	movwf	memset@n+1
   599  0471  3026               	movlw	(low (_lcd_buffer_line2| 0))& (0+255)
   600  0472  120A  118A  228D  120A  118A  	fcall	_memset
   601                           
   602                           ;lcd_20.c: 79: text_str_left_len = strlen(text_str_left);
   603  0477  3008               	movlw	(low ((main@text_str_left-__stringbase)| (0+32768)))& (0+255)
   604  0478  120A  118A  2331  120A  118A  	fcall	_strlen
   605  047D  0871               	movf	?_strlen+1,w
   606  047E  1283               	bcf	3,5	;RP0=0, select bank0
   607  047F  1303               	bcf	3,6	;RP1=0, select bank0
   608  0480  00E1               	movwf	main@text_str_left_len+1
   609  0481  0870               	movf	?_strlen,w
   610  0482  00E0               	movwf	main@text_str_left_len
   611                           
   612                           ;lcd_20.c: 80: text_str_right_len = strlen(text_str_right);
   613  0483  3001               	movlw	(low ((main@text_str_right-__stringbase)| (0+32768)))& (0+255)
   614  0484  120A  118A  2331  120A  118A  	fcall	_strlen
   615  0489  0871               	movf	?_strlen+1,w
   616  048A  1283               	bcf	3,5	;RP0=0, select bank0
   617  048B  1303               	bcf	3,6	;RP1=0, select bank0
   618  048C  00E3               	movwf	main@text_str_right_len+1
   619  048D  0870               	movf	?_strlen,w
   620  048E  00E2               	movwf	main@text_str_right_len
   621  048F                     l1368:	
   622                           ;lcd_20.c: 82: for(;;)
   623                           
   624                           
   625                           ;lcd_20.c: 83: {
   626                           ;lcd_20.c: 84: LCD_Running_Text_Display_Line1(text_str_left, text_str_left_len, (2U), (0
      +                          U));
   627  048F  1283               	bcf	3,5	;RP0=0, select bank0
   628  0490  1303               	bcf	3,6	;RP1=0, select bank0
   629  0491  0861               	movf	main@text_str_left_len+1,w
   630  0492  00D1               	movwf	LCD_Running_Text_Display_Line1@text_str_len+1
   631  0493  0860               	movf	main@text_str_left_len,w
   632  0494  00D0               	movwf	LCD_Running_Text_Display_Line1@text_str_len
   633  0495  3002               	movlw	2
   634  0496  00D2               	movwf	LCD_Running_Text_Display_Line1@num_gaps_between_text_str
   635  0497  3000               	movlw	0
   636  0498  00D3               	movwf	LCD_Running_Text_Display_Line1@num_gaps_between_text_str+1
   637  0499  3000               	movlw	0
   638  049A  00D4               	movwf	LCD_Running_Text_Display_Line1@running_text_shift_direction
   639  049B  00D5               	movwf	LCD_Running_Text_Display_Line1@running_text_shift_direction+1
   640  049C  3008               	movlw	(low ((main@text_str_left-__stringbase)| (0+32768)))& (0+255)
   641  049D  120A  118A  24B7  120A  118A  	fcall	_LCD_Running_Text_Display_Line1
   642                           
   643                           ;lcd_20.c: 85: LCD_Running_Text_Display_Line2(text_str_right, text_str_right_len, (2U), 
      +                          (1U));
   644  04A2  1283               	bcf	3,5	;RP0=0, select bank0
   645  04A3  1303               	bcf	3,6	;RP1=0, select bank0
   646  04A4  0863               	movf	main@text_str_right_len+1,w
   647  04A5  00D1               	movwf	LCD_Running_Text_Display_Line2@text_str_len+1
   648  04A6  0862               	movf	main@text_str_right_len,w
   649  04A7  00D0               	movwf	LCD_Running_Text_Display_Line2@text_str_len
   650  04A8  3002               	movlw	2
   651  04A9  00D2               	movwf	LCD_Running_Text_Display_Line2@num_gaps_between_text_str
   652  04AA  3000               	movlw	0
   653  04AB  00D3               	movwf	LCD_Running_Text_Display_Line2@num_gaps_between_text_str+1
   654  04AC  3001               	movlw	1
   655  04AD  00D4               	movwf	LCD_Running_Text_Display_Line2@running_text_shift_direction
   656  04AE  3000               	movlw	0
   657  04AF  00D5               	movwf	LCD_Running_Text_Display_Line2@running_text_shift_direction+1
   658  04B0  3001               	movlw	(low ((main@text_str_right-__stringbase)| (0+32768)))& (0+255)
   659  04B1  120A  118A  264C  120A  118A  	fcall	_LCD_Running_Text_Display_Line2
   660                           
   661                           ;lcd_20.c: 86: }
   662  04B6  2C8F               	goto	l1368
   663  04B7                     __end_of_main:	
   664                           
   665                           	psect	text1
   666  0331                     __ptext1:	
   667 ;; *************** function _strlen *****************
   668 ;; Defined at:
   669 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\strlen.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;  s               1    wreg     PTR const unsigned char 
   672 ;;		 -> main@text_str_right(7), main@text_str_left(7), 
   673 ;; Auto vars:     Size  Location     Type
   674 ;;  s               1    7[COMMON] PTR const unsigned char 
   675 ;;		 -> main@text_str_right(7), main@text_str_left(7), 
   676 ;;  cp              1    6[COMMON] PTR const unsigned char 
   677 ;;		 -> main@text_str_right(7), main@text_str_left(7), 
   678 ;; Return value:  Size  Location     Type
   679 ;;                  2    0[COMMON] unsigned int 
   680 ;; Registers used:
   681 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   682 ;; Tracked objects:
   683 ;;		On entry : 0/0
   684 ;;		On exit  : 0/0
   685 ;;		Unchanged: 0/0
   686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   687 ;;      Params:         2       0       0       0       0
   688 ;;      Locals:         2       0       0       0       0
   689 ;;      Temps:          4       0       0       0       0
   690 ;;      Totals:         8       0       0       0       0
   691 ;;Total ram usage:        8 bytes
   692 ;; Hardware stack levels used:    2
   693 ;; This function calls:
   694 ;;		Nothing
   695 ;; This function is called by:
   696 ;;		_main
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           
   701                           ;psect for function _strlen
   702  0331                     _strlen:	
   703                           
   704                           ;incstack = 0
   705                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+pclath]
   706                           ;strlen@s stored from wreg
   707  0331  00F7               	movwf	strlen@s
   708  0332  0877               	movf	strlen@s,w
   709  0333  00F2               	movwf	??_strlen
   710  0334  0872               	movf	??_strlen,w
   711  0335  00F6               	movwf	strlen@cp
   712  0336                     l1174:	
   713  0336  0876               	movf	strlen@cp,w
   714  0337  0084               	movwf	4
   715  0338  120A  118A  2003  120A  118A  	fcall	stringdir
   716  033D  3A00               	xorlw	0
   717  033E  1903               	btfsc	3,2
   718  033F  2B45               	goto	l1176
   719  0340  3001               	movlw	1
   720  0341  00F2               	movwf	??_strlen
   721  0342  0872               	movf	??_strlen,w
   722  0343  07F6               	addwf	strlen@cp,f
   723  0344  2B36               	goto	l1174
   724  0345                     l1176:	
   725  0345  0877               	movf	strlen@s,w
   726  0346  00F2               	movwf	??_strlen
   727  0347  3080               	movlw	128
   728  0348  00F3               	movwf	??_strlen+1
   729  0349  09F2               	comf	??_strlen,f
   730  034A  09F3               	comf	??_strlen+1,f
   731  034B  0AF2               	incf	??_strlen,f
   732  034C  1903               	skipnz
   733  034D  0AF3               	incf	??_strlen+1,f
   734  034E  0876               	movf	strlen@cp,w
   735  034F  00F4               	movwf	??_strlen+2
   736  0350  3080               	movlw	128
   737  0351  00F5               	movwf	??_strlen+3
   738  0352  0872               	movf	??_strlen,w
   739  0353  0774               	addwf	??_strlen+2,w
   740  0354  00F0               	movwf	?_strlen
   741  0355  0873               	movf	??_strlen+1,w
   742  0356  1803               	skipnc
   743  0357  0A73               	incf	??_strlen+1,w
   744  0358  0775               	addwf	??_strlen+3,w
   745  0359  00F1               	movwf	?_strlen+1
   746  035A  0008               	return
   747  035B                     __end_of_strlen:	
   748                           
   749                           	psect	text2
   750  028D                     __ptext2:	
   751 ;; *************** function _memset *****************
   752 ;; Defined at:
   753 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\memset.c"
   754 ;; Parameters:    Size  Location     Type
   755 ;;  p1              1    wreg     PTR void 
   756 ;;		 -> lcd_buffer_line2(16), lcd_buffer_line1(16), 
   757 ;;  c               2    0[COMMON] int 
   758 ;;  n               2    2[COMMON] unsigned int 
   759 ;; Auto vars:     Size  Location     Type
   760 ;;  p1              1    6[COMMON] PTR void 
   761 ;;		 -> lcd_buffer_line2(16), lcd_buffer_line1(16), 
   762 ;;  p               1    5[COMMON] PTR unsigned char 
   763 ;;		 -> lcd_buffer_line2(16), lcd_buffer_line1(16), 
   764 ;; Return value:  Size  Location     Type
   765 ;;                  1    wreg      PTR void 
   766 ;; Registers used:
   767 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   768 ;; Tracked objects:
   769 ;;		On entry : 0/0
   770 ;;		On exit  : 0/0
   771 ;;		Unchanged: 0/0
   772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   773 ;;      Params:         4       0       0       0       0
   774 ;;      Locals:         2       0       0       0       0
   775 ;;      Temps:          1       0       0       0       0
   776 ;;      Totals:         7       0       0       0       0
   777 ;;Total ram usage:        7 bytes
   778 ;; Hardware stack levels used:    1
   779 ;; This function calls:
   780 ;;		Nothing
   781 ;; This function is called by:
   782 ;;		_main
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           
   786                           
   787                           ;psect for function _memset
   788  028D                     _memset:	
   789                           
   790                           ;incstack = 0
   791                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
   792                           ;memset@p1 stored from wreg
   793  028D  00F6               	movwf	memset@p1
   794  028E  0876               	movf	memset@p1,w
   795  028F  00F4               	movwf	??_memset
   796  0290  0874               	movf	??_memset,w
   797  0291  00F5               	movwf	memset@p
   798  0292                     l1168:	
   799  0292  3001               	movlw	1
   800  0293  02F2               	subwf	memset@n,f
   801  0294  3000               	movlw	0
   802  0295  1C03               	skipc
   803  0296  03F3               	decf	memset@n+1,f
   804  0297  02F3               	subwf	memset@n+1,f
   805  0298  0A72               	incf	memset@n,w
   806  0299  1903               	btfsc	3,2
   807  029A  0A73               	incf	memset@n+1,w
   808  029B  1903               	btfsc	3,2
   809  029C  0008               	return
   810  029D  0870               	movf	memset@c,w
   811  029E  00F4               	movwf	??_memset
   812  029F  0875               	movf	memset@p,w
   813  02A0  0084               	movwf	4
   814  02A1  0874               	movf	??_memset,w
   815  02A2  1383               	bcf	3,7	;select IRP bank0
   816  02A3  0080               	movwf	0
   817  02A4  3001               	movlw	1
   818  02A5  00F4               	movwf	??_memset
   819  02A6  0874               	movf	??_memset,w
   820  02A7  07F5               	addwf	memset@p,f
   821  02A8  2A92               	goto	l1168
   822  02A9                     __end_of_memset:	
   823                           ;	Return value of _memset is never used
   824                           
   825                           
   826                           	psect	text3
   827  064C                     __ptext3:	
   828 ;; *************** function _LCD_Running_Text_Display_Line2 *****************
   829 ;; Defined at:
   830 ;;		line 167 in file "lcd_20.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;  text_str        1    wreg     PTR const unsigned char 
   833 ;;		 -> main@text_str_right(7), 
   834 ;;  text_str_len    2   10[BANK0 ] const unsigned int 
   835 ;;  num_gaps_bet    2   12[BANK0 ] const unsigned int 
   836 ;;  running_text    2   14[BANK0 ] const unsigned int 
   837 ;; Auto vars:     Size  Location     Type
   838 ;;  text_str        1   21[BANK0 ] PTR const unsigned char 
   839 ;;		 -> main@text_str_right(7), 
   840 ;;  cur_lcd_col     2   24[BANK0 ] int 
   841 ;;  cur_temp_ind    2   22[BANK0 ] int 
   842 ;; Return value:  Size  Location     Type
   843 ;;                  1    wreg      void 
   844 ;; Registers used:
   845 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   846 ;; Tracked objects:
   847 ;;		On entry : 0/0
   848 ;;		On exit  : 0/0
   849 ;;		Unchanged: 0/0
   850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   851 ;;      Params:         0       6       0       0       0
   852 ;;      Locals:         0       5       0       0       0
   853 ;;      Temps:          0       5       0       0       0
   854 ;;      Totals:         0      16       0       0       0
   855 ;;Total ram usage:       16 bytes
   856 ;; Hardware stack levels used:    1
   857 ;; Hardware stack levels required when called:    7
   858 ;; This function calls:
   859 ;;		_Data_Str_LCD_Disp
   860 ;;		_memcpy
   861 ;; This function is called by:
   862 ;;		_main
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           
   867                           ;psect for function _LCD_Running_Text_Display_Line2
   868  064C                     _LCD_Running_Text_Display_Line2:	
   869                           
   870                           ;incstack = 0
   871                           ; Regs used in _LCD_Running_Text_Display_Line2: [wreg-fsr0h+status,2+status,0+btemp+1+pc
      +                          lath+cstack]
   872                           ;LCD_Running_Text_Display_Line2@text_str stored from wreg
   873  064C  1283               	bcf	3,5	;RP0=0, select bank0
   874  064D  1303               	bcf	3,6	;RP1=0, select bank0
   875  064E  00DB               	movwf	LCD_Running_Text_Display_Line2@text_str
   876                           
   877                           ;lcd_20.c: 170: static char temp_text_str[(30U)];
   878                           ;lcd_20.c: 171: static int cur_char_in_str_index = 0;
   879                           ;lcd_20.c: 172: int cur_lcd_col, cur_temp_index;
   880                           ;lcd_20.c: 174: if(line2_text_disp_finish_flag == 'y')
   881  064F  3079               	movlw	121
   882  0650  0664               	xorwf	_line2_text_disp_finish_flag,w
   883  0651  1D03               	btfss	3,2
   884  0652  2FD3               	goto	l1350
   885                           
   886                           ;lcd_20.c: 175: {
   887                           ;lcd_20.c: 177: memcpy(temp_text_str, text_str, text_str_len);
   888  0653  085B               	movf	LCD_Running_Text_Display_Line2@text_str,w
   889  0654  00D6               	movwf	??_LCD_Running_Text_Display_Line2
   890  0655  0856               	movf	??_LCD_Running_Text_Display_Line2,w
   891  0656  00F0               	movwf	memcpy@s1
   892  0657  0851               	movf	LCD_Running_Text_Display_Line2@text_str_len+1,w
   893  0658  00F2               	movwf	memcpy@n+1
   894  0659  0850               	movf	LCD_Running_Text_Display_Line2@text_str_len,w
   895  065A  00F1               	movwf	memcpy@n
   896  065B  30A0               	movlw	(low (LCD_Running_Text_Display_Line2@temp_text_str| 0))& (0+255)
   897  065C  120A  118A  2388  120A  118A  	fcall	_memcpy
   898                           
   899                           ;lcd_20.c: 178: cur_char_in_str_index = 0;
   900  0661  1283               	bcf	3,5	;RP0=0, select bank0
   901  0662  1303               	bcf	3,6	;RP1=0, select bank0
   902  0663  01A0               	clrf	LCD_Running_Text_Display_Line2@cur_char_in_str_index
   903  0664  01A1               	clrf	LCD_Running_Text_Display_Line2@cur_char_in_str_index+1
   904                           
   905                           ;lcd_20.c: 179: line2_text_disp_finish_flag = 'n';
   906  0665  306E               	movlw	110
   907  0666  00D6               	movwf	??_LCD_Running_Text_Display_Line2
   908  0667  0856               	movf	??_LCD_Running_Text_Display_Line2,w
   909  0668  00E4               	movwf	_line2_text_disp_finish_flag
   910                           
   911                           ;lcd_20.c: 180: }
   912                           ;lcd_20.c: 181: switch(running_text_shift_direction)
   913  0669  2FD3               	goto	l1350
   914  066A                     l1276:	
   915                           ;lcd_20.c: 182: {
   916                           ;lcd_20.c: 184: case (0U):
   917                           
   918                           
   919                           ;lcd_20.c: 186: if( cur_char_in_str_index < (int)(text_str_len + num_gaps_between_text_s
      +                          tr))
   920  066A  0852               	movf	LCD_Running_Text_Display_Line2@num_gaps_between_text_str,w
   921  066B  0750               	addwf	LCD_Running_Text_Display_Line2@text_str_len,w
   922  066C  00D6               	movwf	??_LCD_Running_Text_Display_Line2
   923  066D  0853               	movf	LCD_Running_Text_Display_Line2@num_gaps_between_text_str+1,w
   924  066E  1803               	skipnc
   925  066F  0A53               	incf	LCD_Running_Text_Display_Line2@num_gaps_between_text_str+1,w
   926  0670  0751               	addwf	LCD_Running_Text_Display_Line2@text_str_len+1,w
   927  0671  00D7               	movwf	??_LCD_Running_Text_Display_Line2+1
   928  0672  0821               	movf	LCD_Running_Text_Display_Line2@cur_char_in_str_index+1,w
   929  0673  3A80               	xorlw	128
   930  0674  00D8               	movwf	??_LCD_Running_Text_Display_Line2+2
   931  0675  0857               	movf	??_LCD_Running_Text_Display_Line2+1,w
   932  0676  3A80               	xorlw	128
   933  0677  0258               	subwf	??_LCD_Running_Text_Display_Line2+2,w
   934  0678  1D03               	skipz
   935  0679  2E7C               	goto	u575
   936  067A  0856               	movf	??_LCD_Running_Text_Display_Line2,w
   937  067B  0220               	subwf	LCD_Running_Text_Display_Line2@cur_char_in_str_index,w
   938  067C                     u575:	
   939  067C  1803               	skipnc
   940  067D  2F35               	goto	l1310
   941                           
   942                           ;lcd_20.c: 187: {
   943                           ;lcd_20.c: 189: Data_Str_LCD_Disp(lcd_buffer_line2, (16U), (2U) );
   944  067E  3010               	movlw	16
   945  067F  1283               	bcf	3,5	;RP0=0, select bank0
   946  0680  1303               	bcf	3,6	;RP1=0, select bank0
   947  0681  00C8               	movwf	Data_Str_LCD_Disp@lcd_line_buffer_len
   948  0682  3000               	movlw	0
   949  0683  00C9               	movwf	Data_Str_LCD_Disp@lcd_line_buffer_len+1
   950  0684  3002               	movlw	2
   951  0685  00CA               	movwf	Data_Str_LCD_Disp@line
   952  0686  3000               	movlw	0
   953  0687  00CB               	movwf	Data_Str_LCD_Disp@line+1
   954  0688  3026               	movlw	(low (_lcd_buffer_line2| 0))& (0+255)
   955  0689  120A  118A  235B  120A  118A  	fcall	_Data_Str_LCD_Disp
   956                           
   957                           ;lcd_20.c: 190: for(cur_lcd_col = 0; cur_lcd_col < (int) (16U); ++cur_lcd_col)
   958  068E  1283               	bcf	3,5	;RP0=0, select bank0
   959  068F  1303               	bcf	3,6	;RP1=0, select bank0
   960  0690  01DE               	clrf	LCD_Running_Text_Display_Line2@cur_lcd_col
   961  0691  01DF               	clrf	LCD_Running_Text_Display_Line2@cur_lcd_col+1
   962  0692  085F               	movf	LCD_Running_Text_Display_Line2@cur_lcd_col+1,w
   963  0693  3A80               	xorlw	128
   964  0694  00FF               	movwf	127
   965  0695  3080               	movlw	128
   966  0696  027F               	subwf	127,w
   967  0697  1D03               	skipz
   968  0698  2E9B               	goto	u585
   969  0699  3010               	movlw	16
   970  069A  025E               	subwf	LCD_Running_Text_Display_Line2@cur_lcd_col,w
   971  069B                     u585:	
   972  069B  1803               	btfsc	3,0
   973  069C  2ECD               	goto	l1296
   974  069D                     l1286:	
   975                           
   976                           ;lcd_20.c: 191: {
   977                           ;lcd_20.c: 193: if(cur_lcd_col != (int)((16U) - 1))
   978  069D  300F               	movlw	15
   979  069E  1283               	bcf	3,5	;RP0=0, select bank0
   980  069F  1303               	bcf	3,6	;RP1=0, select bank0
   981  06A0  065E               	xorwf	LCD_Running_Text_Display_Line2@cur_lcd_col,w
   982  06A1  045F               	iorwf	LCD_Running_Text_Display_Line2@cur_lcd_col+1,w
   983  06A2  1903               	btfsc	3,2
   984  06A3  2EB0               	goto	l1290
   985                           
   986                           ;lcd_20.c: 194: lcd_buffer_line2[(unsigned int)cur_lcd_col] = lcd_buffer_line2[(unsigned
      +                           int)(cur_lcd_col + 1)];
   987  06A4  085E               	movf	LCD_Running_Text_Display_Line2@cur_lcd_col,w
   988  06A5  3E01               	addlw	1
   989  06A6  3E26               	addlw	(low (_lcd_buffer_line2| 0))& (0+255)
   990  06A7  0084               	movwf	4
   991  06A8  1383               	bcf	3,7	;select IRP bank0
   992  06A9  0800               	movf	0,w
   993  06AA  00D6               	movwf	??_LCD_Running_Text_Display_Line2
   994  06AB  085E               	movf	LCD_Running_Text_Display_Line2@cur_lcd_col,w
   995  06AC  3E26               	addlw	(low (_lcd_buffer_line2| 0))& (0+255)
   996  06AD  0084               	movwf	4
   997  06AE  0856               	movf	??_LCD_Running_Text_Display_Line2,w
   998  06AF  2EBB               	goto	L1
   999  06B0                     l1290:	
  1000                           
  1001                           ;lcd_20.c: 196: else
  1002                           ;lcd_20.c: 198: lcd_buffer_line2[(unsigned int)cur_lcd_col] = temp_text_str[0];
  1003  06B0  1683               	bsf	3,5	;RP0=1, select bank1
  1004  06B1  1303               	bcf	3,6	;RP1=0, select bank1
  1005  06B2  0820               	movf	LCD_Running_Text_Display_Line2@temp_text_str^(0+128),w
  1006  06B3  1283               	bcf	3,5	;RP0=0, select bank0
  1007  06B4  1303               	bcf	3,6	;RP1=0, select bank0
  1008  06B5  00D6               	movwf	??_LCD_Running_Text_Display_Line2
  1009  06B6  085E               	movf	LCD_Running_Text_Display_Line2@cur_lcd_col,w
  1010  06B7  3E26               	addlw	(low (_lcd_buffer_line2| 0))& (0+255)
  1011  06B8  0084               	movwf	4
  1012  06B9  0856               	movf	??_LCD_Running_Text_Display_Line2,w
  1013  06BA  1383               	bcf	3,7	;select IRP bank0
  1014  06BB                     L1:	
  1015  06BB  0080               	movwf	0
  1016  06BC  3001               	movlw	1
  1017  06BD  07DE               	addwf	LCD_Running_Text_Display_Line2@cur_lcd_col,f
  1018  06BE  1803               	skipnc
  1019  06BF  0ADF               	incf	LCD_Running_Text_Display_Line2@cur_lcd_col+1,f
  1020  06C0  3000               	movlw	0
  1021  06C1  07DF               	addwf	LCD_Running_Text_Display_Line2@cur_lcd_col+1,f
  1022  06C2  085F               	movf	LCD_Running_Text_Display_Line2@cur_lcd_col+1,w
  1023  06C3  3A80               	xorlw	128
  1024  06C4  00FF               	movwf	127
  1025  06C5  3080               	movlw	128
  1026  06C6  027F               	subwf	127,w
  1027  06C7  1D03               	skipz
  1028  06C8  2ECB               	goto	u605
  1029  06C9  3010               	movlw	16
  1030  06CA  025E               	subwf	LCD_Running_Text_Display_Line2@cur_lcd_col,w
  1031  06CB                     u605:	
  1032  06CB  1C03               	skipc
  1033  06CC  2E9D               	goto	l1286
  1034  06CD                     l1296:	
  1035                           
  1036                           ;lcd_20.c: 199: }
  1037                           ;lcd_20.c: 201: for(cur_temp_index = 0; cur_temp_index < (int)(text_str_len - cur_char_i
      +                          n_str_index); ++cur_temp_index)
  1038  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  1039  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  1040  06CF  01DC               	clrf	LCD_Running_Text_Display_Line2@cur_temp_index
  1041  06D0  01DD               	clrf	LCD_Running_Text_Display_Line2@cur_temp_index+1
  1042  06D1                     l1306:	
  1043  06D1  0920               	comf	LCD_Running_Text_Display_Line2@cur_char_in_str_index,w
  1044  06D2  00D6               	movwf	??_LCD_Running_Text_Display_Line2
  1045  06D3  0921               	comf	LCD_Running_Text_Display_Line2@cur_char_in_str_index+1,w
  1046  06D4  00D7               	movwf	??_LCD_Running_Text_Display_Line2+1
  1047  06D5  0AD6               	incf	??_LCD_Running_Text_Display_Line2,f
  1048  06D6  1903               	skipnz
  1049  06D7  0AD7               	incf	??_LCD_Running_Text_Display_Line2+1,f
  1050  06D8  0850               	movf	LCD_Running_Text_Display_Line2@text_str_len,w
  1051  06D9  0756               	addwf	??_LCD_Running_Text_Display_Line2,w
  1052  06DA  00D8               	movwf	??_LCD_Running_Text_Display_Line2+2
  1053  06DB  0851               	movf	LCD_Running_Text_Display_Line2@text_str_len+1,w
  1054  06DC  1803               	skipnc
  1055  06DD  0A51               	incf	LCD_Running_Text_Display_Line2@text_str_len+1,w
  1056  06DE  0757               	addwf	??_LCD_Running_Text_Display_Line2+1,w
  1057  06DF  00D9               	movwf	??_LCD_Running_Text_Display_Line2+3
  1058  06E0  085D               	movf	LCD_Running_Text_Display_Line2@cur_temp_index+1,w
  1059  06E1  3A80               	xorlw	128
  1060  06E2  00DA               	movwf	??_LCD_Running_Text_Display_Line2+4
  1061  06E3  0859               	movf	??_LCD_Running_Text_Display_Line2+3,w
  1062  06E4  3A80               	xorlw	128
  1063  06E5  025A               	subwf	??_LCD_Running_Text_Display_Line2+4,w
  1064  06E6  1D03               	skipz
  1065  06E7  2EEA               	goto	u625
  1066  06E8  0858               	movf	??_LCD_Running_Text_Display_Line2+2,w
  1067  06E9  025C               	subwf	LCD_Running_Text_Display_Line2@cur_temp_index,w
  1068  06EA                     u625:	
  1069  06EA  1803               	btfsc	3,0
  1070  06EB  2F2C               	goto	l1308
  1071                           
  1072                           ;lcd_20.c: 202: {
  1073                           ;lcd_20.c: 203: if(cur_temp_index < (int)(text_str_len - 1 - cur_char_in_str_index))
  1074  06EC  1283               	bcf	3,5	;RP0=0, select bank0
  1075  06ED  1303               	bcf	3,6	;RP1=0, select bank0
  1076  06EE  0820               	movf	LCD_Running_Text_Display_Line2@cur_char_in_str_index,w
  1077  06EF  3E01               	addlw	1
  1078  06F0  00D6               	movwf	??_LCD_Running_Text_Display_Line2
  1079  06F1  0821               	movf	LCD_Running_Text_Display_Line2@cur_char_in_str_index+1,w
  1080  06F2  1803               	skipnc
  1081  06F3  3E01               	addlw	1
  1082  06F4  3E00               	addlw	0
  1083  06F5  00D7               	movwf	??_LCD_Running_Text_Display_Line2+1
  1084  06F6  09D6               	comf	??_LCD_Running_Text_Display_Line2,f
  1085  06F7  09D7               	comf	??_LCD_Running_Text_Display_Line2+1,f
  1086  06F8  0AD6               	incf	??_LCD_Running_Text_Display_Line2,f
  1087  06F9  1903               	skipnz
  1088  06FA  0AD7               	incf	??_LCD_Running_Text_Display_Line2+1,f
  1089  06FB  0850               	movf	LCD_Running_Text_Display_Line2@text_str_len,w
  1090  06FC  0756               	addwf	??_LCD_Running_Text_Display_Line2,w
  1091  06FD  00D8               	movwf	??_LCD_Running_Text_Display_Line2+2
  1092  06FE  0851               	movf	LCD_Running_Text_Display_Line2@text_str_len+1,w
  1093  06FF  1803               	skipnc
  1094  0700  0A51               	incf	LCD_Running_Text_Display_Line2@text_str_len+1,w
  1095  0701  0757               	addwf	??_LCD_Running_Text_Display_Line2+1,w
  1096  0702  00D9               	movwf	??_LCD_Running_Text_Display_Line2+3
  1097  0703  085D               	movf	LCD_Running_Text_Display_Line2@cur_temp_index+1,w
  1098  0704  3A80               	xorlw	128
  1099  0705  00DA               	movwf	??_LCD_Running_Text_Display_Line2+4
  1100  0706  0859               	movf	??_LCD_Running_Text_Display_Line2+3,w
  1101  0707  3A80               	xorlw	128
  1102  0708  025A               	subwf	??_LCD_Running_Text_Display_Line2+4,w
  1103  0709  1D03               	skipz
  1104  070A  2F0D               	goto	u615
  1105  070B  0858               	movf	??_LCD_Running_Text_Display_Line2+2,w
  1106  070C  025C               	subwf	LCD_Running_Text_Display_Line2@cur_temp_index,w
  1107  070D                     u615:	
  1108  070D  1803               	skipnc
  1109  070E  2F1E               	goto	l1302
  1110                           
  1111                           ;lcd_20.c: 204: temp_text_str[(unsigned int) cur_temp_index] = temp_text_str[(unsigned i
      +                          nt)(cur_temp_index + 1)];
  1112  070F  1283               	bcf	3,5	;RP0=0, select bank0
  1113  0710  1303               	bcf	3,6	;RP1=0, select bank0
  1114  0711  085C               	movf	LCD_Running_Text_Display_Line2@cur_temp_index,w
  1115  0712  3E01               	addlw	1
  1116  0713  3EA0               	addlw	(low (LCD_Running_Text_Display_Line2@temp_text_str| 0))& (0+255)
  1117  0714  0084               	movwf	4
  1118  0715  1383               	bcf	3,7	;select IRP bank1
  1119  0716  0800               	movf	0,w
  1120  0717  00D6               	movwf	??_LCD_Running_Text_Display_Line2
  1121  0718  085C               	movf	LCD_Running_Text_Display_Line2@cur_temp_index,w
  1122  0719  3EA0               	addlw	(low (LCD_Running_Text_Display_Line2@temp_text_str| 0))& (0+255)
  1123  071A  0084               	movwf	4
  1124  071B  0856               	movf	??_LCD_Running_Text_Display_Line2,w
  1125  071C  0080               	movwf	0
  1126  071D  2F25               	goto	l1304
  1127  071E                     l1302:	
  1128                           
  1129                           ;lcd_20.c: 206: else
  1130                           ;lcd_20.c: 207: temp_text_str[(unsigned int) cur_temp_index] = 0;
  1131  071E  1283               	bcf	3,5	;RP0=0, select bank0
  1132  071F  1303               	bcf	3,6	;RP1=0, select bank0
  1133  0720  085C               	movf	LCD_Running_Text_Display_Line2@cur_temp_index,w
  1134  0721  3EA0               	addlw	(low (LCD_Running_Text_Display_Line2@temp_text_str| 0))& (0+255)
  1135  0722  0084               	movwf	4
  1136  0723  1383               	bcf	3,7	;select IRP bank1
  1137  0724  0180               	clrf	0
  1138  0725                     l1304:	
  1139  0725  3001               	movlw	1
  1140  0726  07DC               	addwf	LCD_Running_Text_Display_Line2@cur_temp_index,f
  1141  0727  1803               	skipnc
  1142  0728  0ADD               	incf	LCD_Running_Text_Display_Line2@cur_temp_index+1,f
  1143  0729  3000               	movlw	0
  1144  072A  07DD               	addwf	LCD_Running_Text_Display_Line2@cur_temp_index+1,f
  1145  072B  2ED1               	goto	l1306
  1146  072C                     l1308:	
  1147                           
  1148                           ;lcd_20.c: 208: }
  1149                           ;lcd_20.c: 209: ++cur_char_in_str_index;
  1150  072C  3001               	movlw	1
  1151  072D  1283               	bcf	3,5	;RP0=0, select bank0
  1152  072E  1303               	bcf	3,6	;RP1=0, select bank0
  1153  072F  07A0               	addwf	LCD_Running_Text_Display_Line2@cur_char_in_str_index,f
  1154  0730  1803               	skipnc
  1155  0731  0AA1               	incf	LCD_Running_Text_Display_Line2@cur_char_in_str_index+1,f
  1156  0732  3000               	movlw	0
  1157  0733  07A1               	addwf	LCD_Running_Text_Display_Line2@cur_char_in_str_index+1,f
  1158                           
  1159                           ;lcd_20.c: 210: }
  1160  0734  0008               	return
  1161  0735                     l1310:	
  1162                           
  1163                           ;lcd_20.c: 211: else
  1164                           ;lcd_20.c: 212: {
  1165                           ;lcd_20.c: 213: line2_text_disp_finish_flag = 'y';
  1166  0735  3079               	movlw	121
  1167  0736  1283               	bcf	3,5	;RP0=0, select bank0
  1168  0737  1303               	bcf	3,6	;RP1=0, select bank0
  1169  0738  00D6               	movwf	??_LCD_Running_Text_Display_Line2
  1170  0739  0856               	movf	??_LCD_Running_Text_Display_Line2,w
  1171  073A  00E4               	movwf	_line2_text_disp_finish_flag
  1172                           
  1173                           ;lcd_20.c: 215: }
  1174                           ;lcd_20.c: 216: break;
  1175  073B  0008               	return
  1176  073C                     l1312:	
  1177                           ;lcd_20.c: 218: case (1U):
  1178                           
  1179                           
  1180                           ;lcd_20.c: 219: if(cur_char_in_str_index < (int)(text_str_len + num_gaps_between_text_st
      +                          r))
  1181  073C  0852               	movf	LCD_Running_Text_Display_Line2@num_gaps_between_text_str,w
  1182  073D  0750               	addwf	LCD_Running_Text_Display_Line2@text_str_len,w
  1183  073E  00D6               	movwf	??_LCD_Running_Text_Display_Line2
  1184  073F  0853               	movf	LCD_Running_Text_Display_Line2@num_gaps_between_text_str+1,w
  1185  0740  1803               	skipnc
  1186  0741  0A53               	incf	LCD_Running_Text_Display_Line2@num_gaps_between_text_str+1,w
  1187  0742  0751               	addwf	LCD_Running_Text_Display_Line2@text_str_len+1,w
  1188  0743  00D7               	movwf	??_LCD_Running_Text_Display_Line2+1
  1189  0744  0821               	movf	LCD_Running_Text_Display_Line2@cur_char_in_str_index+1,w
  1190  0745  3A80               	xorlw	128
  1191  0746  00D8               	movwf	??_LCD_Running_Text_Display_Line2+2
  1192  0747  0857               	movf	??_LCD_Running_Text_Display_Line2+1,w
  1193  0748  3A80               	xorlw	128
  1194  0749  0258               	subwf	??_LCD_Running_Text_Display_Line2+2,w
  1195  074A  1D03               	skipz
  1196  074B  2F4E               	goto	u635
  1197  074C  0856               	movf	??_LCD_Running_Text_Display_Line2,w
  1198  074D  0220               	subwf	LCD_Running_Text_Display_Line2@cur_char_in_str_index,w
  1199  074E                     u635:	
  1200  074E  1803               	skipnc
  1201  074F  2FCC               	goto	l1346
  1202                           
  1203                           ;lcd_20.c: 220: {
  1204                           ;lcd_20.c: 221: Data_Str_LCD_Disp(lcd_buffer_line2, (16U), (2U));
  1205  0750  3010               	movlw	16
  1206  0751  1283               	bcf	3,5	;RP0=0, select bank0
  1207  0752  1303               	bcf	3,6	;RP1=0, select bank0
  1208  0753  00C8               	movwf	Data_Str_LCD_Disp@lcd_line_buffer_len
  1209  0754  3000               	movlw	0
  1210  0755  00C9               	movwf	Data_Str_LCD_Disp@lcd_line_buffer_len+1
  1211  0756  3002               	movlw	2
  1212  0757  00CA               	movwf	Data_Str_LCD_Disp@line
  1213  0758  3000               	movlw	0
  1214  0759  00CB               	movwf	Data_Str_LCD_Disp@line+1
  1215  075A  3026               	movlw	(low (_lcd_buffer_line2| 0))& (0+255)
  1216  075B  120A  118A  235B  120A  118A  	fcall	_Data_Str_LCD_Disp
  1217                           
  1218                           ;lcd_20.c: 222: for(cur_lcd_col = (int)((16U) - 1); cur_lcd_col >= 0; --cur_lcd_col)
  1219  0760  300F               	movlw	15
  1220  0761  1283               	bcf	3,5	;RP0=0, select bank0
  1221  0762  1303               	bcf	3,6	;RP1=0, select bank0
  1222  0763  00DE               	movwf	LCD_Running_Text_Display_Line2@cur_lcd_col
  1223  0764  3000               	movlw	0
  1224  0765  00DF               	movwf	LCD_Running_Text_Display_Line2@cur_lcd_col+1
  1225  0766  1BDF               	btfsc	LCD_Running_Text_Display_Line2@cur_lcd_col+1,7
  1226  0767  2F84               	goto	l1332
  1227  0768                     l1322:	
  1228                           
  1229                           ;lcd_20.c: 223: {
  1230                           ;lcd_20.c: 224: if(cur_lcd_col != 0)
  1231  0768  085E               	movf	LCD_Running_Text_Display_Line2@cur_lcd_col,w
  1232  0769  045F               	iorwf	LCD_Running_Text_Display_Line2@cur_lcd_col+1,w
  1233  076A  1903               	btfsc	3,2
  1234  076B  2F70               	goto	l1326
  1235                           
  1236                           ;lcd_20.c: 225: lcd_buffer_line2[(unsigned int)cur_lcd_col] = lcd_buffer_line2[(unsigned
      +                           int)(cur_lcd_col - 1)];
  1237  076C  085E               	movf	LCD_Running_Text_Display_Line2@cur_lcd_col,w
  1238  076D  3EFF               	addlw	255
  1239  076E  3E26               	addlw	(low (_lcd_buffer_line2| 0))& (0+255)
  1240  076F  2F73               	goto	L2
  1241  0770                     l1326:	
  1242                           
  1243                           ;lcd_20.c: 226: else
  1244                           ;lcd_20.c: 227: lcd_buffer_line2[(unsigned int)cur_lcd_col] = temp_text_str[(unsigned in
      +                          t)(text_str_len - 1)];
  1245  0770  0850               	movf	LCD_Running_Text_Display_Line2@text_str_len,w
  1246  0771  3EFF               	addlw	255
  1247  0772  3EA0               	addlw	(low (LCD_Running_Text_Display_Line2@temp_text_str| 0))& (0+255)
  1248  0773                     L2:	
  1249  0773  0084               	movwf	4
  1250  0774  1383               	bcf	3,7	;select IRP bank1
  1251  0775  0800               	movf	0,w
  1252  0776  00D6               	movwf	??_LCD_Running_Text_Display_Line2
  1253  0777  085E               	movf	LCD_Running_Text_Display_Line2@cur_lcd_col,w
  1254  0778  3E26               	addlw	(low (_lcd_buffer_line2| 0))& (0+255)
  1255  0779  0084               	movwf	4
  1256  077A  0856               	movf	??_LCD_Running_Text_Display_Line2,w
  1257  077B  0080               	movwf	0
  1258  077C  30FF               	movlw	255
  1259  077D  07DE               	addwf	LCD_Running_Text_Display_Line2@cur_lcd_col,f
  1260  077E  1803               	skipnc
  1261  077F  0ADF               	incf	LCD_Running_Text_Display_Line2@cur_lcd_col+1,f
  1262  0780  30FF               	movlw	255
  1263  0781  07DF               	addwf	LCD_Running_Text_Display_Line2@cur_lcd_col+1,f
  1264  0782  1FDF               	btfss	LCD_Running_Text_Display_Line2@cur_lcd_col+1,7
  1265  0783  2F68               	goto	l1322
  1266  0784                     l1332:	
  1267                           
  1268                           ;lcd_20.c: 228: }
  1269                           ;lcd_20.c: 229: for(cur_temp_index = (int) (text_str_len - 1 ); cur_temp_index >= cur_ch
      +                          ar_in_str_index; --cur_temp_index)
  1270  0784  0850               	movf	LCD_Running_Text_Display_Line2@text_str_len,w
  1271  0785  3EFF               	addlw	255
  1272  0786  00DC               	movwf	LCD_Running_Text_Display_Line2@cur_temp_index
  1273  0787  0851               	movf	LCD_Running_Text_Display_Line2@text_str_len+1,w
  1274  0788  1803               	skipnc
  1275  0789  3E01               	addlw	1
  1276  078A  3EFF               	addlw	255
  1277  078B  00DD               	movwf	LCD_Running_Text_Display_Line2@cur_temp_index+1
  1278  078C                     l1342:	
  1279  078C  085D               	movf	LCD_Running_Text_Display_Line2@cur_temp_index+1,w
  1280  078D  3A80               	xorlw	128
  1281  078E  00D6               	movwf	??_LCD_Running_Text_Display_Line2
  1282  078F  0821               	movf	LCD_Running_Text_Display_Line2@cur_char_in_str_index+1,w
  1283  0790  3A80               	xorlw	128
  1284  0791  0256               	subwf	??_LCD_Running_Text_Display_Line2,w
  1285  0792  1D03               	skipz
  1286  0793  2F96               	goto	u685
  1287  0794  0820               	movf	LCD_Running_Text_Display_Line2@cur_char_in_str_index,w
  1288  0795  025C               	subwf	LCD_Running_Text_Display_Line2@cur_temp_index,w
  1289  0796                     u685:	
  1290  0796  1C03               	btfss	3,0
  1291  0797  2FC3               	goto	l1344
  1292                           
  1293                           ;lcd_20.c: 230: {
  1294                           ;lcd_20.c: 231: if(cur_temp_index > cur_char_in_str_index )
  1295  0798  1283               	bcf	3,5	;RP0=0, select bank0
  1296  0799  1303               	bcf	3,6	;RP1=0, select bank0
  1297  079A  0821               	movf	LCD_Running_Text_Display_Line2@cur_char_in_str_index+1,w
  1298  079B  3A80               	xorlw	128
  1299  079C  00D6               	movwf	??_LCD_Running_Text_Display_Line2
  1300  079D  085D               	movf	LCD_Running_Text_Display_Line2@cur_temp_index+1,w
  1301  079E  3A80               	xorlw	128
  1302  079F  0256               	subwf	??_LCD_Running_Text_Display_Line2,w
  1303  07A0  1D03               	skipz
  1304  07A1  2FA4               	goto	u675
  1305  07A2  085C               	movf	LCD_Running_Text_Display_Line2@cur_temp_index,w
  1306  07A3  0220               	subwf	LCD_Running_Text_Display_Line2@cur_char_in_str_index,w
  1307  07A4                     u675:	
  1308  07A4  1803               	skipnc
  1309  07A5  2FB5               	goto	l1338
  1310                           
  1311                           ;lcd_20.c: 232: temp_text_str[(unsigned int) cur_temp_index] = temp_text_str[(unsigned i
      +                          nt)(cur_temp_index - 1)];
  1312  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  1313  07A7  1303               	bcf	3,6	;RP1=0, select bank0
  1314  07A8  085C               	movf	LCD_Running_Text_Display_Line2@cur_temp_index,w
  1315  07A9  3EFF               	addlw	255
  1316  07AA  3EA0               	addlw	(low (LCD_Running_Text_Display_Line2@temp_text_str| 0))& (0+255)
  1317  07AB  0084               	movwf	4
  1318  07AC  1383               	bcf	3,7	;select IRP bank1
  1319  07AD  0800               	movf	0,w
  1320  07AE  00D6               	movwf	??_LCD_Running_Text_Display_Line2
  1321  07AF  085C               	movf	LCD_Running_Text_Display_Line2@cur_temp_index,w
  1322  07B0  3EA0               	addlw	(low (LCD_Running_Text_Display_Line2@temp_text_str| 0))& (0+255)
  1323  07B1  0084               	movwf	4
  1324  07B2  0856               	movf	??_LCD_Running_Text_Display_Line2,w
  1325  07B3  0080               	movwf	0
  1326  07B4  2FBC               	goto	l1340
  1327  07B5                     l1338:	
  1328                           
  1329                           ;lcd_20.c: 233: else
  1330                           ;lcd_20.c: 235: temp_text_str[(unsigned int) cur_temp_index] = 0;
  1331  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  1332  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  1333  07B7  085C               	movf	LCD_Running_Text_Display_Line2@cur_temp_index,w
  1334  07B8  3EA0               	addlw	(low (LCD_Running_Text_Display_Line2@temp_text_str| 0))& (0+255)
  1335  07B9  0084               	movwf	4
  1336  07BA  1383               	bcf	3,7	;select IRP bank1
  1337  07BB  0180               	clrf	0
  1338  07BC                     l1340:	
  1339  07BC  30FF               	movlw	255
  1340  07BD  07DC               	addwf	LCD_Running_Text_Display_Line2@cur_temp_index,f
  1341  07BE  1803               	skipnc
  1342  07BF  0ADD               	incf	LCD_Running_Text_Display_Line2@cur_temp_index+1,f
  1343  07C0  30FF               	movlw	255
  1344  07C1  07DD               	addwf	LCD_Running_Text_Display_Line2@cur_temp_index+1,f
  1345  07C2  2F8C               	goto	l1342
  1346  07C3                     l1344:	
  1347                           
  1348                           ;lcd_20.c: 236: }
  1349                           ;lcd_20.c: 237: ++cur_char_in_str_index;
  1350  07C3  3001               	movlw	1
  1351  07C4  1283               	bcf	3,5	;RP0=0, select bank0
  1352  07C5  1303               	bcf	3,6	;RP1=0, select bank0
  1353  07C6  07A0               	addwf	LCD_Running_Text_Display_Line2@cur_char_in_str_index,f
  1354  07C7  1803               	skipnc
  1355  07C8  0AA1               	incf	LCD_Running_Text_Display_Line2@cur_char_in_str_index+1,f
  1356  07C9  3000               	movlw	0
  1357  07CA  07A1               	addwf	LCD_Running_Text_Display_Line2@cur_char_in_str_index+1,f
  1358                           
  1359                           ;lcd_20.c: 238: }
  1360  07CB  0008               	return
  1361  07CC                     l1346:	
  1362                           
  1363                           ;lcd_20.c: 239: else
  1364                           ;lcd_20.c: 240: {
  1365                           ;lcd_20.c: 241: line2_text_disp_finish_flag = 'y';
  1366  07CC  3079               	movlw	121
  1367  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  1368  07CE  1303               	bcf	3,6	;RP1=0, select bank0
  1369  07CF  00D6               	movwf	??_LCD_Running_Text_Display_Line2
  1370  07D0  0856               	movf	??_LCD_Running_Text_Display_Line2,w
  1371  07D1  00E4               	movwf	_line2_text_disp_finish_flag
  1372                           
  1373                           ;lcd_20.c: 244: }
  1374                           
  1375                           ;lcd_20.c: 242: }
  1376                           ;lcd_20.c: 243: break;
  1377  07D2  0008               	return
  1378  07D3                     l1350:	
  1379                           
  1380                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1381                           ; Switch size 1, requested type "space"
  1382                           ; Number of cases is 1, Range of values is 0 to 0
  1383                           ; switch strategies available:
  1384                           ; Name         Instructions Cycles
  1385                           ; simple_byte            4     3 (average)
  1386                           ; direct_byte           11     8 (fixed)
  1387                           ; jumptable            260     6 (fixed)
  1388                           ;	Chosen strategy is simple_byte
  1389  07D3  0855               	movf	LCD_Running_Text_Display_Line2@running_text_shift_direction+1,w
  1390  07D4  3A00               	xorlw	0	; case 0
  1391  07D5  1903               	skipnz
  1392  07D6  2FD8               	goto	l1432
  1393  07D7  2FE0               	goto	l121
  1394  07D8                     l1432:	
  1395                           
  1396                           ; Switch size 1, requested type "space"
  1397                           ; Number of cases is 2, Range of values is 0 to 1
  1398                           ; switch strategies available:
  1399                           ; Name         Instructions Cycles
  1400                           ; simple_byte            7     4 (average)
  1401                           ; direct_byte           14     8 (fixed)
  1402                           ; jumptable            260     6 (fixed)
  1403                           ;	Chosen strategy is simple_byte
  1404  07D8  0854               	movf	LCD_Running_Text_Display_Line2@running_text_shift_direction,w
  1405  07D9  3A00               	xorlw	0	; case 0
  1406  07DA  1903               	skipnz
  1407  07DB  2E6A               	goto	l1276
  1408  07DC  3A01               	xorlw	1	; case 1
  1409  07DD  1903               	skipnz
  1410  07DE  2F3C               	goto	l1312
  1411  07DF  2FE0               	goto	l121
  1412  07E0                     l121:	
  1413  07E0  0008               	return
  1414  07E1                     __end_of_LCD_Running_Text_Display_Line2:	
  1415                           
  1416                           	psect	text4
  1417  04B7                     __ptext4:	
  1418 ;; *************** function _LCD_Running_Text_Display_Line1 *****************
  1419 ;; Defined at:
  1420 ;;		line 88 in file "lcd_20.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;  text_str        1    wreg     PTR const unsigned char 
  1423 ;;		 -> main@text_str_left(7), 
  1424 ;;  text_str_len    2   10[BANK0 ] const unsigned int 
  1425 ;;  num_gaps_bet    2   12[BANK0 ] const unsigned int 
  1426 ;;  running_text    2   14[BANK0 ] const unsigned int 
  1427 ;; Auto vars:     Size  Location     Type
  1428 ;;  text_str        1   21[BANK0 ] PTR const unsigned char 
  1429 ;;		 -> main@text_str_left(7), 
  1430 ;;  cur_lcd_col     2   24[BANK0 ] int 
  1431 ;;  cur_temp_ind    2   22[BANK0 ] int 
  1432 ;; Return value:  Size  Location     Type
  1433 ;;                  1    wreg      void 
  1434 ;; Registers used:
  1435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1436 ;; Tracked objects:
  1437 ;;		On entry : 0/0
  1438 ;;		On exit  : 0/0
  1439 ;;		Unchanged: 0/0
  1440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1441 ;;      Params:         0       6       0       0       0
  1442 ;;      Locals:         0       5       0       0       0
  1443 ;;      Temps:          0       5       0       0       0
  1444 ;;      Totals:         0      16       0       0       0
  1445 ;;Total ram usage:       16 bytes
  1446 ;; Hardware stack levels used:    1
  1447 ;; Hardware stack levels required when called:    7
  1448 ;; This function calls:
  1449 ;;		_Data_Str_LCD_Disp
  1450 ;;		_memcpy
  1451 ;; This function is called by:
  1452 ;;		_main
  1453 ;; This function uses a non-reentrant model
  1454 ;;
  1455                           
  1456                           
  1457                           ;psect for function _LCD_Running_Text_Display_Line1
  1458  04B7                     _LCD_Running_Text_Display_Line1:	
  1459                           
  1460                           ;incstack = 0
  1461                           ; Regs used in _LCD_Running_Text_Display_Line1: [wreg-fsr0h+status,2+status,0+btemp+1+pc
      +                          lath+cstack]
  1462                           ;LCD_Running_Text_Display_Line1@text_str stored from wreg
  1463  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  1464  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  1465  04B9  00DB               	movwf	LCD_Running_Text_Display_Line1@text_str
  1466                           
  1467                           ;lcd_20.c: 91: static char temp_text_str[(30U)];
  1468                           ;lcd_20.c: 92: static int cur_char_in_str_index = 0;
  1469                           ;lcd_20.c: 93: int cur_lcd_col, cur_temp_index;
  1470                           ;lcd_20.c: 95: if(line1_text_disp_finish_flag == 'y')
  1471  04BA  3079               	movlw	121
  1472  04BB  0665               	xorwf	_line1_text_disp_finish_flag,w
  1473  04BC  1D03               	btfss	3,2
  1474  04BD  2E3E               	goto	l1262
  1475                           
  1476                           ;lcd_20.c: 96: {
  1477                           ;lcd_20.c: 98: memcpy(temp_text_str, text_str, text_str_len);
  1478  04BE  085B               	movf	LCD_Running_Text_Display_Line1@text_str,w
  1479  04BF  00D6               	movwf	??_LCD_Running_Text_Display_Line1
  1480  04C0  0856               	movf	??_LCD_Running_Text_Display_Line1,w
  1481  04C1  00F0               	movwf	memcpy@s1
  1482  04C2  0851               	movf	LCD_Running_Text_Display_Line1@text_str_len+1,w
  1483  04C3  00F2               	movwf	memcpy@n+1
  1484  04C4  0850               	movf	LCD_Running_Text_Display_Line1@text_str_len,w
  1485  04C5  00F1               	movwf	memcpy@n
  1486  04C6  30BE               	movlw	(low (LCD_Running_Text_Display_Line1@temp_text_str| 0))& (0+255)
  1487  04C7  120A  118A  2388  120A  118A  	fcall	_memcpy
  1488                           
  1489                           ;lcd_20.c: 99: cur_char_in_str_index = 0;
  1490  04CC  1283               	bcf	3,5	;RP0=0, select bank0
  1491  04CD  1303               	bcf	3,6	;RP1=0, select bank0
  1492  04CE  01A2               	clrf	LCD_Running_Text_Display_Line1@cur_char_in_str_index
  1493  04CF  01A3               	clrf	LCD_Running_Text_Display_Line1@cur_char_in_str_index+1
  1494                           
  1495                           ;lcd_20.c: 100: line1_text_disp_finish_flag = 'n';
  1496  04D0  306E               	movlw	110
  1497  04D1  00D6               	movwf	??_LCD_Running_Text_Display_Line1
  1498  04D2  0856               	movf	??_LCD_Running_Text_Display_Line1,w
  1499  04D3  00E5               	movwf	_line1_text_disp_finish_flag
  1500                           
  1501                           ;lcd_20.c: 101: }
  1502                           ;lcd_20.c: 102: switch(running_text_shift_direction)
  1503  04D4  2E3E               	goto	l1262
  1504  04D5                     l1188:	
  1505                           ;lcd_20.c: 103: {
  1506                           ;lcd_20.c: 105: case (0U):
  1507                           
  1508                           
  1509                           ;lcd_20.c: 107: if( cur_char_in_str_index < (int)(text_str_len + num_gaps_between_text_s
      +                          tr))
  1510  04D5  0852               	movf	LCD_Running_Text_Display_Line1@num_gaps_between_text_str,w
  1511  04D6  0750               	addwf	LCD_Running_Text_Display_Line1@text_str_len,w
  1512  04D7  00D6               	movwf	??_LCD_Running_Text_Display_Line1
  1513  04D8  0853               	movf	LCD_Running_Text_Display_Line1@num_gaps_between_text_str+1,w
  1514  04D9  1803               	skipnc
  1515  04DA  0A53               	incf	LCD_Running_Text_Display_Line1@num_gaps_between_text_str+1,w
  1516  04DB  0751               	addwf	LCD_Running_Text_Display_Line1@text_str_len+1,w
  1517  04DC  00D7               	movwf	??_LCD_Running_Text_Display_Line1+1
  1518  04DD  0823               	movf	LCD_Running_Text_Display_Line1@cur_char_in_str_index+1,w
  1519  04DE  3A80               	xorlw	128
  1520  04DF  00D8               	movwf	??_LCD_Running_Text_Display_Line1+2
  1521  04E0  0857               	movf	??_LCD_Running_Text_Display_Line1+1,w
  1522  04E1  3A80               	xorlw	128
  1523  04E2  0258               	subwf	??_LCD_Running_Text_Display_Line1+2,w
  1524  04E3  1D03               	skipz
  1525  04E4  2CE7               	goto	u445
  1526  04E5  0856               	movf	??_LCD_Running_Text_Display_Line1,w
  1527  04E6  0222               	subwf	LCD_Running_Text_Display_Line1@cur_char_in_str_index,w
  1528  04E7                     u445:	
  1529  04E7  1803               	skipnc
  1530  04E8  2DA0               	goto	l1222
  1531                           
  1532                           ;lcd_20.c: 108: {
  1533                           ;lcd_20.c: 110: Data_Str_LCD_Disp(lcd_buffer_line1, (16U), (1U) );
  1534  04E9  3010               	movlw	16
  1535  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  1536  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  1537  04EC  00C8               	movwf	Data_Str_LCD_Disp@lcd_line_buffer_len
  1538  04ED  3000               	movlw	0
  1539  04EE  00C9               	movwf	Data_Str_LCD_Disp@lcd_line_buffer_len+1
  1540  04EF  3001               	movlw	1
  1541  04F0  00CA               	movwf	Data_Str_LCD_Disp@line
  1542  04F1  3000               	movlw	0
  1543  04F2  00CB               	movwf	Data_Str_LCD_Disp@line+1
  1544  04F3  3036               	movlw	(low (_lcd_buffer_line1| 0))& (0+255)
  1545  04F4  120A  118A  235B  120A  118A  	fcall	_Data_Str_LCD_Disp
  1546                           
  1547                           ;lcd_20.c: 111: for(cur_lcd_col = 0; cur_lcd_col < (int) (16U); ++cur_lcd_col)
  1548  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  1549  04FA  1303               	bcf	3,6	;RP1=0, select bank0
  1550  04FB  01DE               	clrf	LCD_Running_Text_Display_Line1@cur_lcd_col
  1551  04FC  01DF               	clrf	LCD_Running_Text_Display_Line1@cur_lcd_col+1
  1552  04FD  085F               	movf	LCD_Running_Text_Display_Line1@cur_lcd_col+1,w
  1553  04FE  3A80               	xorlw	128
  1554  04FF  00FF               	movwf	127
  1555  0500  3080               	movlw	128
  1556  0501  027F               	subwf	127,w
  1557  0502  1D03               	skipz
  1558  0503  2D06               	goto	u455
  1559  0504  3010               	movlw	16
  1560  0505  025E               	subwf	LCD_Running_Text_Display_Line1@cur_lcd_col,w
  1561  0506                     u455:	
  1562  0506  1803               	btfsc	3,0
  1563  0507  2D38               	goto	l1208
  1564  0508                     l1198:	
  1565                           
  1566                           ;lcd_20.c: 112: {
  1567                           ;lcd_20.c: 114: if(cur_lcd_col != (int)((16U) - 1))
  1568  0508  300F               	movlw	15
  1569  0509  1283               	bcf	3,5	;RP0=0, select bank0
  1570  050A  1303               	bcf	3,6	;RP1=0, select bank0
  1571  050B  065E               	xorwf	LCD_Running_Text_Display_Line1@cur_lcd_col,w
  1572  050C  045F               	iorwf	LCD_Running_Text_Display_Line1@cur_lcd_col+1,w
  1573  050D  1903               	btfsc	3,2
  1574  050E  2D1B               	goto	l1202
  1575                           
  1576                           ;lcd_20.c: 115: lcd_buffer_line1[(unsigned int)cur_lcd_col] = lcd_buffer_line1[(unsigned
      +                           int)(cur_lcd_col + 1)];
  1577  050F  085E               	movf	LCD_Running_Text_Display_Line1@cur_lcd_col,w
  1578  0510  3E01               	addlw	1
  1579  0511  3E36               	addlw	(low (_lcd_buffer_line1| 0))& (0+255)
  1580  0512  0084               	movwf	4
  1581  0513  1383               	bcf	3,7	;select IRP bank0
  1582  0514  0800               	movf	0,w
  1583  0515  00D6               	movwf	??_LCD_Running_Text_Display_Line1
  1584  0516  085E               	movf	LCD_Running_Text_Display_Line1@cur_lcd_col,w
  1585  0517  3E36               	addlw	(low (_lcd_buffer_line1| 0))& (0+255)
  1586  0518  0084               	movwf	4
  1587  0519  0856               	movf	??_LCD_Running_Text_Display_Line1,w
  1588  051A  2D26               	goto	L3
  1589  051B                     l1202:	
  1590                           
  1591                           ;lcd_20.c: 117: else
  1592                           ;lcd_20.c: 119: lcd_buffer_line1[(unsigned int)cur_lcd_col] = temp_text_str[0];
  1593  051B  1683               	bsf	3,5	;RP0=1, select bank1
  1594  051C  1303               	bcf	3,6	;RP1=0, select bank1
  1595  051D  083E               	movf	LCD_Running_Text_Display_Line1@temp_text_str^(0+128),w
  1596  051E  1283               	bcf	3,5	;RP0=0, select bank0
  1597  051F  1303               	bcf	3,6	;RP1=0, select bank0
  1598  0520  00D6               	movwf	??_LCD_Running_Text_Display_Line1
  1599  0521  085E               	movf	LCD_Running_Text_Display_Line1@cur_lcd_col,w
  1600  0522  3E36               	addlw	(low (_lcd_buffer_line1| 0))& (0+255)
  1601  0523  0084               	movwf	4
  1602  0524  0856               	movf	??_LCD_Running_Text_Display_Line1,w
  1603  0525  1383               	bcf	3,7	;select IRP bank0
  1604  0526                     L3:	
  1605  0526  0080               	movwf	0
  1606  0527  3001               	movlw	1
  1607  0528  07DE               	addwf	LCD_Running_Text_Display_Line1@cur_lcd_col,f
  1608  0529  1803               	skipnc
  1609  052A  0ADF               	incf	LCD_Running_Text_Display_Line1@cur_lcd_col+1,f
  1610  052B  3000               	movlw	0
  1611  052C  07DF               	addwf	LCD_Running_Text_Display_Line1@cur_lcd_col+1,f
  1612  052D  085F               	movf	LCD_Running_Text_Display_Line1@cur_lcd_col+1,w
  1613  052E  3A80               	xorlw	128
  1614  052F  00FF               	movwf	127
  1615  0530  3080               	movlw	128
  1616  0531  027F               	subwf	127,w
  1617  0532  1D03               	skipz
  1618  0533  2D36               	goto	u475
  1619  0534  3010               	movlw	16
  1620  0535  025E               	subwf	LCD_Running_Text_Display_Line1@cur_lcd_col,w
  1621  0536                     u475:	
  1622  0536  1C03               	skipc
  1623  0537  2D08               	goto	l1198
  1624  0538                     l1208:	
  1625                           
  1626                           ;lcd_20.c: 120: }
  1627                           ;lcd_20.c: 122: for(cur_temp_index = 0; cur_temp_index < (int)(text_str_len - cur_char_i
      +                          n_str_index); ++cur_temp_index)
  1628  0538  1283               	bcf	3,5	;RP0=0, select bank0
  1629  0539  1303               	bcf	3,6	;RP1=0, select bank0
  1630  053A  01DC               	clrf	LCD_Running_Text_Display_Line1@cur_temp_index
  1631  053B  01DD               	clrf	LCD_Running_Text_Display_Line1@cur_temp_index+1
  1632  053C                     l1218:	
  1633  053C  0922               	comf	LCD_Running_Text_Display_Line1@cur_char_in_str_index,w
  1634  053D  00D6               	movwf	??_LCD_Running_Text_Display_Line1
  1635  053E  0923               	comf	LCD_Running_Text_Display_Line1@cur_char_in_str_index+1,w
  1636  053F  00D7               	movwf	??_LCD_Running_Text_Display_Line1+1
  1637  0540  0AD6               	incf	??_LCD_Running_Text_Display_Line1,f
  1638  0541  1903               	skipnz
  1639  0542  0AD7               	incf	??_LCD_Running_Text_Display_Line1+1,f
  1640  0543  0850               	movf	LCD_Running_Text_Display_Line1@text_str_len,w
  1641  0544  0756               	addwf	??_LCD_Running_Text_Display_Line1,w
  1642  0545  00D8               	movwf	??_LCD_Running_Text_Display_Line1+2
  1643  0546  0851               	movf	LCD_Running_Text_Display_Line1@text_str_len+1,w
  1644  0547  1803               	skipnc
  1645  0548  0A51               	incf	LCD_Running_Text_Display_Line1@text_str_len+1,w
  1646  0549  0757               	addwf	??_LCD_Running_Text_Display_Line1+1,w
  1647  054A  00D9               	movwf	??_LCD_Running_Text_Display_Line1+3
  1648  054B  085D               	movf	LCD_Running_Text_Display_Line1@cur_temp_index+1,w
  1649  054C  3A80               	xorlw	128
  1650  054D  00DA               	movwf	??_LCD_Running_Text_Display_Line1+4
  1651  054E  0859               	movf	??_LCD_Running_Text_Display_Line1+3,w
  1652  054F  3A80               	xorlw	128
  1653  0550  025A               	subwf	??_LCD_Running_Text_Display_Line1+4,w
  1654  0551  1D03               	skipz
  1655  0552  2D55               	goto	u495
  1656  0553  0858               	movf	??_LCD_Running_Text_Display_Line1+2,w
  1657  0554  025C               	subwf	LCD_Running_Text_Display_Line1@cur_temp_index,w
  1658  0555                     u495:	
  1659  0555  1803               	btfsc	3,0
  1660  0556  2D97               	goto	l1220
  1661                           
  1662                           ;lcd_20.c: 123: {
  1663                           ;lcd_20.c: 124: if(cur_temp_index < (int)(text_str_len - 1 - cur_char_in_str_index))
  1664  0557  1283               	bcf	3,5	;RP0=0, select bank0
  1665  0558  1303               	bcf	3,6	;RP1=0, select bank0
  1666  0559  0822               	movf	LCD_Running_Text_Display_Line1@cur_char_in_str_index,w
  1667  055A  3E01               	addlw	1
  1668  055B  00D6               	movwf	??_LCD_Running_Text_Display_Line1
  1669  055C  0823               	movf	LCD_Running_Text_Display_Line1@cur_char_in_str_index+1,w
  1670  055D  1803               	skipnc
  1671  055E  3E01               	addlw	1
  1672  055F  3E00               	addlw	0
  1673  0560  00D7               	movwf	??_LCD_Running_Text_Display_Line1+1
  1674  0561  09D6               	comf	??_LCD_Running_Text_Display_Line1,f
  1675  0562  09D7               	comf	??_LCD_Running_Text_Display_Line1+1,f
  1676  0563  0AD6               	incf	??_LCD_Running_Text_Display_Line1,f
  1677  0564  1903               	skipnz
  1678  0565  0AD7               	incf	??_LCD_Running_Text_Display_Line1+1,f
  1679  0566  0850               	movf	LCD_Running_Text_Display_Line1@text_str_len,w
  1680  0567  0756               	addwf	??_LCD_Running_Text_Display_Line1,w
  1681  0568  00D8               	movwf	??_LCD_Running_Text_Display_Line1+2
  1682  0569  0851               	movf	LCD_Running_Text_Display_Line1@text_str_len+1,w
  1683  056A  1803               	skipnc
  1684  056B  0A51               	incf	LCD_Running_Text_Display_Line1@text_str_len+1,w
  1685  056C  0757               	addwf	??_LCD_Running_Text_Display_Line1+1,w
  1686  056D  00D9               	movwf	??_LCD_Running_Text_Display_Line1+3
  1687  056E  085D               	movf	LCD_Running_Text_Display_Line1@cur_temp_index+1,w
  1688  056F  3A80               	xorlw	128
  1689  0570  00DA               	movwf	??_LCD_Running_Text_Display_Line1+4
  1690  0571  0859               	movf	??_LCD_Running_Text_Display_Line1+3,w
  1691  0572  3A80               	xorlw	128
  1692  0573  025A               	subwf	??_LCD_Running_Text_Display_Line1+4,w
  1693  0574  1D03               	skipz
  1694  0575  2D78               	goto	u485
  1695  0576  0858               	movf	??_LCD_Running_Text_Display_Line1+2,w
  1696  0577  025C               	subwf	LCD_Running_Text_Display_Line1@cur_temp_index,w
  1697  0578                     u485:	
  1698  0578  1803               	skipnc
  1699  0579  2D89               	goto	l1214
  1700                           
  1701                           ;lcd_20.c: 125: temp_text_str[(unsigned int) cur_temp_index] = temp_text_str[(unsigned i
      +                          nt)(cur_temp_index + 1)];
  1702  057A  1283               	bcf	3,5	;RP0=0, select bank0
  1703  057B  1303               	bcf	3,6	;RP1=0, select bank0
  1704  057C  085C               	movf	LCD_Running_Text_Display_Line1@cur_temp_index,w
  1705  057D  3E01               	addlw	1
  1706  057E  3EBE               	addlw	(low (LCD_Running_Text_Display_Line1@temp_text_str| 0))& (0+255)
  1707  057F  0084               	movwf	4
  1708  0580  1383               	bcf	3,7	;select IRP bank1
  1709  0581  0800               	movf	0,w
  1710  0582  00D6               	movwf	??_LCD_Running_Text_Display_Line1
  1711  0583  085C               	movf	LCD_Running_Text_Display_Line1@cur_temp_index,w
  1712  0584  3EBE               	addlw	(low (LCD_Running_Text_Display_Line1@temp_text_str| 0))& (0+255)
  1713  0585  0084               	movwf	4
  1714  0586  0856               	movf	??_LCD_Running_Text_Display_Line1,w
  1715  0587  0080               	movwf	0
  1716  0588  2D90               	goto	l1216
  1717  0589                     l1214:	
  1718                           
  1719                           ;lcd_20.c: 127: else
  1720                           ;lcd_20.c: 128: temp_text_str[(unsigned int) cur_temp_index] = 0;
  1721  0589  1283               	bcf	3,5	;RP0=0, select bank0
  1722  058A  1303               	bcf	3,6	;RP1=0, select bank0
  1723  058B  085C               	movf	LCD_Running_Text_Display_Line1@cur_temp_index,w
  1724  058C  3EBE               	addlw	(low (LCD_Running_Text_Display_Line1@temp_text_str| 0))& (0+255)
  1725  058D  0084               	movwf	4
  1726  058E  1383               	bcf	3,7	;select IRP bank1
  1727  058F  0180               	clrf	0
  1728  0590                     l1216:	
  1729  0590  3001               	movlw	1
  1730  0591  07DC               	addwf	LCD_Running_Text_Display_Line1@cur_temp_index,f
  1731  0592  1803               	skipnc
  1732  0593  0ADD               	incf	LCD_Running_Text_Display_Line1@cur_temp_index+1,f
  1733  0594  3000               	movlw	0
  1734  0595  07DD               	addwf	LCD_Running_Text_Display_Line1@cur_temp_index+1,f
  1735  0596  2D3C               	goto	l1218
  1736  0597                     l1220:	
  1737                           
  1738                           ;lcd_20.c: 129: }
  1739                           ;lcd_20.c: 130: ++cur_char_in_str_index;
  1740  0597  3001               	movlw	1
  1741  0598  1283               	bcf	3,5	;RP0=0, select bank0
  1742  0599  1303               	bcf	3,6	;RP1=0, select bank0
  1743  059A  07A2               	addwf	LCD_Running_Text_Display_Line1@cur_char_in_str_index,f
  1744  059B  1803               	skipnc
  1745  059C  0AA3               	incf	LCD_Running_Text_Display_Line1@cur_char_in_str_index+1,f
  1746  059D  3000               	movlw	0
  1747  059E  07A3               	addwf	LCD_Running_Text_Display_Line1@cur_char_in_str_index+1,f
  1748                           
  1749                           ;lcd_20.c: 131: }
  1750  059F  0008               	return
  1751  05A0                     l1222:	
  1752                           
  1753                           ;lcd_20.c: 132: else
  1754                           ;lcd_20.c: 133: {
  1755                           ;lcd_20.c: 134: line1_text_disp_finish_flag = 'y';
  1756  05A0  3079               	movlw	121
  1757  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  1758  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  1759  05A3  00D6               	movwf	??_LCD_Running_Text_Display_Line1
  1760  05A4  0856               	movf	??_LCD_Running_Text_Display_Line1,w
  1761  05A5  00E5               	movwf	_line1_text_disp_finish_flag
  1762                           
  1763                           ;lcd_20.c: 135: }
  1764                           ;lcd_20.c: 136: break;
  1765  05A6  0008               	return
  1766  05A7                     l1224:	
  1767                           ;lcd_20.c: 138: case (1U):
  1768                           
  1769                           
  1770                           ;lcd_20.c: 139: if(cur_char_in_str_index < (int)(text_str_len + num_gaps_between_text_st
      +                          r))
  1771  05A7  0852               	movf	LCD_Running_Text_Display_Line1@num_gaps_between_text_str,w
  1772  05A8  0750               	addwf	LCD_Running_Text_Display_Line1@text_str_len,w
  1773  05A9  00D6               	movwf	??_LCD_Running_Text_Display_Line1
  1774  05AA  0853               	movf	LCD_Running_Text_Display_Line1@num_gaps_between_text_str+1,w
  1775  05AB  1803               	skipnc
  1776  05AC  0A53               	incf	LCD_Running_Text_Display_Line1@num_gaps_between_text_str+1,w
  1777  05AD  0751               	addwf	LCD_Running_Text_Display_Line1@text_str_len+1,w
  1778  05AE  00D7               	movwf	??_LCD_Running_Text_Display_Line1+1
  1779  05AF  0823               	movf	LCD_Running_Text_Display_Line1@cur_char_in_str_index+1,w
  1780  05B0  3A80               	xorlw	128
  1781  05B1  00D8               	movwf	??_LCD_Running_Text_Display_Line1+2
  1782  05B2  0857               	movf	??_LCD_Running_Text_Display_Line1+1,w
  1783  05B3  3A80               	xorlw	128
  1784  05B4  0258               	subwf	??_LCD_Running_Text_Display_Line1+2,w
  1785  05B5  1D03               	skipz
  1786  05B6  2DB9               	goto	u505
  1787  05B7  0856               	movf	??_LCD_Running_Text_Display_Line1,w
  1788  05B8  0222               	subwf	LCD_Running_Text_Display_Line1@cur_char_in_str_index,w
  1789  05B9                     u505:	
  1790  05B9  1803               	skipnc
  1791  05BA  2E37               	goto	l1258
  1792                           
  1793                           ;lcd_20.c: 140: {
  1794                           ;lcd_20.c: 141: Data_Str_LCD_Disp(lcd_buffer_line1, (16U), (1U));
  1795  05BB  3010               	movlw	16
  1796  05BC  1283               	bcf	3,5	;RP0=0, select bank0
  1797  05BD  1303               	bcf	3,6	;RP1=0, select bank0
  1798  05BE  00C8               	movwf	Data_Str_LCD_Disp@lcd_line_buffer_len
  1799  05BF  3000               	movlw	0
  1800  05C0  00C9               	movwf	Data_Str_LCD_Disp@lcd_line_buffer_len+1
  1801  05C1  3001               	movlw	1
  1802  05C2  00CA               	movwf	Data_Str_LCD_Disp@line
  1803  05C3  3000               	movlw	0
  1804  05C4  00CB               	movwf	Data_Str_LCD_Disp@line+1
  1805  05C5  3036               	movlw	(low (_lcd_buffer_line1| 0))& (0+255)
  1806  05C6  120A  118A  235B  120A  118A  	fcall	_Data_Str_LCD_Disp
  1807                           
  1808                           ;lcd_20.c: 142: for(cur_lcd_col = (int)((16U) - 1); cur_lcd_col >= 0; --cur_lcd_col)
  1809  05CB  300F               	movlw	15
  1810  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  1811  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  1812  05CE  00DE               	movwf	LCD_Running_Text_Display_Line1@cur_lcd_col
  1813  05CF  3000               	movlw	0
  1814  05D0  00DF               	movwf	LCD_Running_Text_Display_Line1@cur_lcd_col+1
  1815  05D1  1BDF               	btfsc	LCD_Running_Text_Display_Line1@cur_lcd_col+1,7
  1816  05D2  2DEF               	goto	l1244
  1817  05D3                     l1234:	
  1818                           
  1819                           ;lcd_20.c: 143: {
  1820                           ;lcd_20.c: 144: if(cur_lcd_col != 0)
  1821  05D3  085E               	movf	LCD_Running_Text_Display_Line1@cur_lcd_col,w
  1822  05D4  045F               	iorwf	LCD_Running_Text_Display_Line1@cur_lcd_col+1,w
  1823  05D5  1903               	btfsc	3,2
  1824  05D6  2DDB               	goto	l1238
  1825                           
  1826                           ;lcd_20.c: 145: lcd_buffer_line1[(unsigned int)cur_lcd_col] = lcd_buffer_line1[(unsigned
      +                           int)(cur_lcd_col - 1)];
  1827  05D7  085E               	movf	LCD_Running_Text_Display_Line1@cur_lcd_col,w
  1828  05D8  3EFF               	addlw	255
  1829  05D9  3E36               	addlw	(low (_lcd_buffer_line1| 0))& (0+255)
  1830  05DA  2DDE               	goto	L4
  1831  05DB                     l1238:	
  1832                           
  1833                           ;lcd_20.c: 146: else
  1834                           ;lcd_20.c: 147: lcd_buffer_line1[(unsigned int)cur_lcd_col] = temp_text_str[(unsigned in
      +                          t)(text_str_len - 1)];
  1835  05DB  0850               	movf	LCD_Running_Text_Display_Line1@text_str_len,w
  1836  05DC  3EFF               	addlw	255
  1837  05DD  3EBE               	addlw	(low (LCD_Running_Text_Display_Line1@temp_text_str| 0))& (0+255)
  1838  05DE                     L4:	
  1839  05DE  0084               	movwf	4
  1840  05DF  1383               	bcf	3,7	;select IRP bank1
  1841  05E0  0800               	movf	0,w
  1842  05E1  00D6               	movwf	??_LCD_Running_Text_Display_Line1
  1843  05E2  085E               	movf	LCD_Running_Text_Display_Line1@cur_lcd_col,w
  1844  05E3  3E36               	addlw	(low (_lcd_buffer_line1| 0))& (0+255)
  1845  05E4  0084               	movwf	4
  1846  05E5  0856               	movf	??_LCD_Running_Text_Display_Line1,w
  1847  05E6  0080               	movwf	0
  1848  05E7  30FF               	movlw	255
  1849  05E8  07DE               	addwf	LCD_Running_Text_Display_Line1@cur_lcd_col,f
  1850  05E9  1803               	skipnc
  1851  05EA  0ADF               	incf	LCD_Running_Text_Display_Line1@cur_lcd_col+1,f
  1852  05EB  30FF               	movlw	255
  1853  05EC  07DF               	addwf	LCD_Running_Text_Display_Line1@cur_lcd_col+1,f
  1854  05ED  1FDF               	btfss	LCD_Running_Text_Display_Line1@cur_lcd_col+1,7
  1855  05EE  2DD3               	goto	l1234
  1856  05EF                     l1244:	
  1857                           
  1858                           ;lcd_20.c: 148: }
  1859                           ;lcd_20.c: 149: for(cur_temp_index = (int) (text_str_len - 1 ); cur_temp_index >= cur_ch
      +                          ar_in_str_index; --cur_temp_index)
  1860  05EF  0850               	movf	LCD_Running_Text_Display_Line1@text_str_len,w
  1861  05F0  3EFF               	addlw	255
  1862  05F1  00DC               	movwf	LCD_Running_Text_Display_Line1@cur_temp_index
  1863  05F2  0851               	movf	LCD_Running_Text_Display_Line1@text_str_len+1,w
  1864  05F3  1803               	skipnc
  1865  05F4  3E01               	addlw	1
  1866  05F5  3EFF               	addlw	255
  1867  05F6  00DD               	movwf	LCD_Running_Text_Display_Line1@cur_temp_index+1
  1868  05F7                     l1254:	
  1869  05F7  085D               	movf	LCD_Running_Text_Display_Line1@cur_temp_index+1,w
  1870  05F8  3A80               	xorlw	128
  1871  05F9  00D6               	movwf	??_LCD_Running_Text_Display_Line1
  1872  05FA  0823               	movf	LCD_Running_Text_Display_Line1@cur_char_in_str_index+1,w
  1873  05FB  3A80               	xorlw	128
  1874  05FC  0256               	subwf	??_LCD_Running_Text_Display_Line1,w
  1875  05FD  1D03               	skipz
  1876  05FE  2E01               	goto	u555
  1877  05FF  0822               	movf	LCD_Running_Text_Display_Line1@cur_char_in_str_index,w
  1878  0600  025C               	subwf	LCD_Running_Text_Display_Line1@cur_temp_index,w
  1879  0601                     u555:	
  1880  0601  1C03               	btfss	3,0
  1881  0602  2E2E               	goto	l1256
  1882                           
  1883                           ;lcd_20.c: 150: {
  1884                           ;lcd_20.c: 151: if(cur_temp_index > cur_char_in_str_index )
  1885  0603  1283               	bcf	3,5	;RP0=0, select bank0
  1886  0604  1303               	bcf	3,6	;RP1=0, select bank0
  1887  0605  0823               	movf	LCD_Running_Text_Display_Line1@cur_char_in_str_index+1,w
  1888  0606  3A80               	xorlw	128
  1889  0607  00D6               	movwf	??_LCD_Running_Text_Display_Line1
  1890  0608  085D               	movf	LCD_Running_Text_Display_Line1@cur_temp_index+1,w
  1891  0609  3A80               	xorlw	128
  1892  060A  0256               	subwf	??_LCD_Running_Text_Display_Line1,w
  1893  060B  1D03               	skipz
  1894  060C  2E0F               	goto	u545
  1895  060D  085C               	movf	LCD_Running_Text_Display_Line1@cur_temp_index,w
  1896  060E  0222               	subwf	LCD_Running_Text_Display_Line1@cur_char_in_str_index,w
  1897  060F                     u545:	
  1898  060F  1803               	skipnc
  1899  0610  2E20               	goto	l1250
  1900                           
  1901                           ;lcd_20.c: 152: temp_text_str[(unsigned int) cur_temp_index] = temp_text_str[(unsigned i
      +                          nt)(cur_temp_index - 1)];
  1902  0611  1283               	bcf	3,5	;RP0=0, select bank0
  1903  0612  1303               	bcf	3,6	;RP1=0, select bank0
  1904  0613  085C               	movf	LCD_Running_Text_Display_Line1@cur_temp_index,w
  1905  0614  3EFF               	addlw	255
  1906  0615  3EBE               	addlw	(low (LCD_Running_Text_Display_Line1@temp_text_str| 0))& (0+255)
  1907  0616  0084               	movwf	4
  1908  0617  1383               	bcf	3,7	;select IRP bank1
  1909  0618  0800               	movf	0,w
  1910  0619  00D6               	movwf	??_LCD_Running_Text_Display_Line1
  1911  061A  085C               	movf	LCD_Running_Text_Display_Line1@cur_temp_index,w
  1912  061B  3EBE               	addlw	(low (LCD_Running_Text_Display_Line1@temp_text_str| 0))& (0+255)
  1913  061C  0084               	movwf	4
  1914  061D  0856               	movf	??_LCD_Running_Text_Display_Line1,w
  1915  061E  0080               	movwf	0
  1916  061F  2E27               	goto	l1252
  1917  0620                     l1250:	
  1918                           
  1919                           ;lcd_20.c: 153: else
  1920                           ;lcd_20.c: 155: temp_text_str[(unsigned int) cur_temp_index] = 0;
  1921  0620  1283               	bcf	3,5	;RP0=0, select bank0
  1922  0621  1303               	bcf	3,6	;RP1=0, select bank0
  1923  0622  085C               	movf	LCD_Running_Text_Display_Line1@cur_temp_index,w
  1924  0623  3EBE               	addlw	(low (LCD_Running_Text_Display_Line1@temp_text_str| 0))& (0+255)
  1925  0624  0084               	movwf	4
  1926  0625  1383               	bcf	3,7	;select IRP bank1
  1927  0626  0180               	clrf	0
  1928  0627                     l1252:	
  1929  0627  30FF               	movlw	255
  1930  0628  07DC               	addwf	LCD_Running_Text_Display_Line1@cur_temp_index,f
  1931  0629  1803               	skipnc
  1932  062A  0ADD               	incf	LCD_Running_Text_Display_Line1@cur_temp_index+1,f
  1933  062B  30FF               	movlw	255
  1934  062C  07DD               	addwf	LCD_Running_Text_Display_Line1@cur_temp_index+1,f
  1935  062D  2DF7               	goto	l1254
  1936  062E                     l1256:	
  1937                           
  1938                           ;lcd_20.c: 156: }
  1939                           ;lcd_20.c: 157: ++cur_char_in_str_index;
  1940  062E  3001               	movlw	1
  1941  062F  1283               	bcf	3,5	;RP0=0, select bank0
  1942  0630  1303               	bcf	3,6	;RP1=0, select bank0
  1943  0631  07A2               	addwf	LCD_Running_Text_Display_Line1@cur_char_in_str_index,f
  1944  0632  1803               	skipnc
  1945  0633  0AA3               	incf	LCD_Running_Text_Display_Line1@cur_char_in_str_index+1,f
  1946  0634  3000               	movlw	0
  1947  0635  07A3               	addwf	LCD_Running_Text_Display_Line1@cur_char_in_str_index+1,f
  1948                           
  1949                           ;lcd_20.c: 158: }
  1950  0636  0008               	return
  1951  0637                     l1258:	
  1952                           
  1953                           ;lcd_20.c: 159: else
  1954                           ;lcd_20.c: 160: {
  1955                           ;lcd_20.c: 161: line1_text_disp_finish_flag = 'y';
  1956  0637  3079               	movlw	121
  1957  0638  1283               	bcf	3,5	;RP0=0, select bank0
  1958  0639  1303               	bcf	3,6	;RP1=0, select bank0
  1959  063A  00D6               	movwf	??_LCD_Running_Text_Display_Line1
  1960  063B  0856               	movf	??_LCD_Running_Text_Display_Line1,w
  1961  063C  00E5               	movwf	_line1_text_disp_finish_flag
  1962                           
  1963                           ;lcd_20.c: 164: }
  1964                           
  1965                           ;lcd_20.c: 162: }
  1966                           ;lcd_20.c: 163: break;
  1967  063D  0008               	return
  1968  063E                     l1262:	
  1969                           
  1970                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1971                           ; Switch size 1, requested type "space"
  1972                           ; Number of cases is 1, Range of values is 0 to 0
  1973                           ; switch strategies available:
  1974                           ; Name         Instructions Cycles
  1975                           ; simple_byte            4     3 (average)
  1976                           ; direct_byte           11     8 (fixed)
  1977                           ; jumptable            260     6 (fixed)
  1978                           ;	Chosen strategy is simple_byte
  1979  063E  0855               	movf	LCD_Running_Text_Display_Line1@running_text_shift_direction+1,w
  1980  063F  3A00               	xorlw	0	; case 0
  1981  0640  1903               	skipnz
  1982  0641  2E43               	goto	l1434
  1983  0642  2E4B               	goto	l87
  1984  0643                     l1434:	
  1985                           
  1986                           ; Switch size 1, requested type "space"
  1987                           ; Number of cases is 2, Range of values is 0 to 1
  1988                           ; switch strategies available:
  1989                           ; Name         Instructions Cycles
  1990                           ; simple_byte            7     4 (average)
  1991                           ; direct_byte           14     8 (fixed)
  1992                           ; jumptable            260     6 (fixed)
  1993                           ;	Chosen strategy is simple_byte
  1994  0643  0854               	movf	LCD_Running_Text_Display_Line1@running_text_shift_direction,w
  1995  0644  3A00               	xorlw	0	; case 0
  1996  0645  1903               	skipnz
  1997  0646  2CD5               	goto	l1188
  1998  0647  3A01               	xorlw	1	; case 1
  1999  0648  1903               	skipnz
  2000  0649  2DA7               	goto	l1224
  2001  064A  2E4B               	goto	l87
  2002  064B                     l87:	
  2003  064B  0008               	return
  2004  064C                     __end_of_LCD_Running_Text_Display_Line1:	
  2005                           
  2006                           	psect	text5
  2007  0388                     __ptext5:	
  2008 ;; *************** function _memcpy *****************
  2009 ;; Defined at:
  2010 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v1.44\sources\common\memcpy.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;  d1              1    wreg     PTR void 
  2013 ;;		 -> LCD_Running_Text_Display_Line2@temp_text_str(30), LCD_Running_Text_Display_Line1@temp_text_str(30), 
  2014 ;;  s1              1    0[COMMON] PTR const void 
  2015 ;;		 -> main@text_str_right(7), main@text_str_left(7), 
  2016 ;;  n               2    1[COMMON] unsigned int 
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;  d1              1    7[COMMON] PTR void 
  2019 ;;		 -> LCD_Running_Text_Display_Line2@temp_text_str(30), LCD_Running_Text_Display_Line1@temp_text_str(30), 
  2020 ;;  s               1    6[COMMON] PTR const unsigned char 
  2021 ;;		 -> main@text_str_right(7), main@text_str_left(7), 
  2022 ;;  d               1    5[COMMON] PTR unsigned char 
  2023 ;;		 -> LCD_Running_Text_Display_Line2@temp_text_str(30), LCD_Running_Text_Display_Line1@temp_text_str(30), 
  2024 ;;  tmp             1    4[COMMON] unsigned char 
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  1    wreg      PTR void 
  2027 ;; Registers used:
  2028 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2034 ;;      Params:         3       0       0       0       0
  2035 ;;      Locals:         4       0       0       0       0
  2036 ;;      Temps:          1       0       0       0       0
  2037 ;;      Totals:         8       0       0       0       0
  2038 ;;Total ram usage:        8 bytes
  2039 ;; Hardware stack levels used:    2
  2040 ;; This function calls:
  2041 ;;		Nothing
  2042 ;; This function is called by:
  2043 ;;		_LCD_Running_Text_Display_Line1
  2044 ;;		_LCD_Running_Text_Display_Line2
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           
  2049                           ;psect for function _memcpy
  2050  0388                     _memcpy:	
  2051                           
  2052                           ;incstack = 0
  2053                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0+pclath]
  2054                           ;memcpy@d1 stored from wreg
  2055  0388  00F7               	movwf	memcpy@d1
  2056  0389  0870               	movf	memcpy@s1,w
  2057  038A  00F3               	movwf	??_memcpy
  2058  038B  0873               	movf	??_memcpy,w
  2059  038C  00F6               	movwf	memcpy@s
  2060  038D  0877               	movf	memcpy@d1,w
  2061  038E  00F3               	movwf	??_memcpy
  2062  038F  0873               	movf	??_memcpy,w
  2063  0390  00F5               	movwf	memcpy@d
  2064  0391                     l1138:	
  2065  0391  3001               	movlw	1
  2066  0392  02F1               	subwf	memcpy@n,f
  2067  0393  3000               	movlw	0
  2068  0394  1C03               	skipc
  2069  0395  03F2               	decf	memcpy@n+1,f
  2070  0396  02F2               	subwf	memcpy@n+1,f
  2071  0397  0A71               	incf	memcpy@n,w
  2072  0398  1903               	btfsc	3,2
  2073  0399  0A72               	incf	memcpy@n+1,w
  2074  039A  1903               	btfsc	3,2
  2075  039B  0008               	return
  2076  039C  0876               	movf	memcpy@s,w
  2077  039D  0084               	movwf	4
  2078  039E  120A  118A  2003  120A  118A  	fcall	stringdir
  2079  03A3  00F3               	movwf	??_memcpy
  2080  03A4  0873               	movf	??_memcpy,w
  2081  03A5  00F4               	movwf	memcpy@tmp
  2082  03A6  3001               	movlw	1
  2083  03A7  00F3               	movwf	??_memcpy
  2084  03A8  0873               	movf	??_memcpy,w
  2085  03A9  07F6               	addwf	memcpy@s,f
  2086  03AA  0874               	movf	memcpy@tmp,w
  2087  03AB  00F3               	movwf	??_memcpy
  2088  03AC  0875               	movf	memcpy@d,w
  2089  03AD  0084               	movwf	4
  2090  03AE  0873               	movf	??_memcpy,w
  2091  03AF  1383               	bcf	3,7	;select IRP bank0
  2092  03B0  0080               	movwf	0
  2093  03B1  3001               	movlw	1
  2094  03B2  00F3               	movwf	??_memcpy
  2095  03B3  0873               	movf	??_memcpy,w
  2096  03B4  07F5               	addwf	memcpy@d,f
  2097  03B5  2B91               	goto	l1138
  2098  03B6                     __end_of_memcpy:	
  2099                           ;	Return value of _memcpy is never used
  2100                           
  2101                           
  2102                           	psect	text6
  2103  035B                     __ptext6:	
  2104 ;; *************** function _Data_Str_LCD_Disp *****************
  2105 ;; Defined at:
  2106 ;;		line 331 in file "lcd_20.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;  lcd_line_buf    1    wreg     PTR const unsigned char 
  2109 ;;		 -> lcd_buffer_line2(16), lcd_buffer_line1(16), 
  2110 ;;  lcd_line_buf    2    2[BANK0 ] const unsigned int 
  2111 ;;  line            2    4[BANK0 ] const unsigned int 
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;  lcd_line_buf    1    7[BANK0 ] PTR const unsigned char 
  2114 ;;		 -> lcd_buffer_line2(16), lcd_buffer_line1(16), 
  2115 ;;  cur_char_in_    2    8[BANK0 ] unsigned int 
  2116 ;; Return value:  Size  Location     Type
  2117 ;;                  1    wreg      void 
  2118 ;; Registers used:
  2119 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2120 ;; Tracked objects:
  2121 ;;		On entry : 0/0
  2122 ;;		On exit  : 0/0
  2123 ;;		Unchanged: 0/0
  2124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2125 ;;      Params:         0       4       0       0       0
  2126 ;;      Locals:         0       3       0       0       0
  2127 ;;      Temps:          0       1       0       0       0
  2128 ;;      Totals:         0       8       0       0       0
  2129 ;;Total ram usage:        8 bytes
  2130 ;; Hardware stack levels used:    1
  2131 ;; Hardware stack levels required when called:    6
  2132 ;; This function calls:
  2133 ;;		_LCD_Line_Select
  2134 ;;		_Write_LCD_Data
  2135 ;; This function is called by:
  2136 ;;		_LCD_Running_Text_Display_Line1
  2137 ;;		_LCD_Running_Text_Display_Line2
  2138 ;; This function uses a non-reentrant model
  2139 ;;
  2140                           
  2141                           
  2142                           ;psect for function _Data_Str_LCD_Disp
  2143  035B                     _Data_Str_LCD_Disp:	
  2144                           
  2145                           ;incstack = 0
  2146                           ; Regs used in _Data_Str_LCD_Disp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2147                           ;Data_Str_LCD_Disp@lcd_line_buffer stored from wreg
  2148  035B  1283               	bcf	3,5	;RP0=0, select bank0
  2149  035C  1303               	bcf	3,6	;RP1=0, select bank0
  2150  035D  00CD               	movwf	Data_Str_LCD_Disp@lcd_line_buffer
  2151                           
  2152                           ;lcd_20.c: 333: unsigned int cur_char_in_text_str_index;
  2153                           ;lcd_20.c: 336: LCD_Line_Select(line);
  2154  035E  084B               	movf	Data_Str_LCD_Disp@line+1,w
  2155  035F  00C7               	movwf	LCD_Line_Select@line+1
  2156  0360  084A               	movf	Data_Str_LCD_Disp@line,w
  2157  0361  00C6               	movwf	LCD_Line_Select@line
  2158  0362  120A  118A  22E7  120A  118A  	fcall	_LCD_Line_Select
  2159                           
  2160                           ;lcd_20.c: 337: for(cur_char_in_text_str_index = 0; cur_char_in_text_str_index < lcd_lin
      +                          e_buffer_len; ++cur_char_in_text_str_index)
  2161  0367  1283               	bcf	3,5	;RP0=0, select bank0
  2162  0368  1303               	bcf	3,6	;RP1=0, select bank0
  2163  0369  01CE               	clrf	Data_Str_LCD_Disp@cur_char_in_text_str_index
  2164  036A  01CF               	clrf	Data_Str_LCD_Disp@cur_char_in_text_str_index+1
  2165  036B                     L5:	
  2166  036B  0849               	movf	Data_Str_LCD_Disp@lcd_line_buffer_len+1,w
  2167  036C  024F               	subwf	Data_Str_LCD_Disp@cur_char_in_text_str_index+1,w
  2168  036D  1D03               	skipz
  2169  036E  2B71               	goto	u395
  2170  036F  0848               	movf	Data_Str_LCD_Disp@lcd_line_buffer_len,w
  2171  0370  024E               	subwf	Data_Str_LCD_Disp@cur_char_in_text_str_index,w
  2172  0371                     u395:	
  2173  0371  1803               	btfsc	3,0
  2174  0372  0008               	return
  2175                           
  2176                           ;lcd_20.c: 338: {
  2177                           ;lcd_20.c: 339: Write_LCD_Data(lcd_line_buffer[cur_char_in_text_str_index]);
  2178  0373  084E               	movf	Data_Str_LCD_Disp@cur_char_in_text_str_index,w
  2179  0374  074D               	addwf	Data_Str_LCD_Disp@lcd_line_buffer,w
  2180  0375  00CC               	movwf	??_Data_Str_LCD_Disp
  2181  0376  084C               	movf	??_Data_Str_LCD_Disp,w
  2182  0377  0084               	movwf	4
  2183  0378  1383               	bcf	3,7	;select IRP bank0
  2184  0379  0800               	movf	0,w
  2185  037A  120A  118A  2279  120A  118A  	fcall	_Write_LCD_Data
  2186  037F  3001               	movlw	1
  2187  0380  1283               	bcf	3,5	;RP0=0, select bank0
  2188  0381  1303               	bcf	3,6	;RP1=0, select bank0
  2189  0382  07CE               	addwf	Data_Str_LCD_Disp@cur_char_in_text_str_index,f
  2190  0383  1803               	skipnc
  2191  0384  0ACF               	incf	Data_Str_LCD_Disp@cur_char_in_text_str_index+1,f
  2192  0385  3000               	movlw	0
  2193  0386  07CF               	addwf	Data_Str_LCD_Disp@cur_char_in_text_str_index+1,f
  2194  0387  2B6B               	goto	L5
  2195  0388                     __end_of_Data_Str_LCD_Disp:	
  2196                           
  2197                           	psect	text7
  2198  0279                     __ptext7:	
  2199 ;; *************** function _Write_LCD_Data *****************
  2200 ;; Defined at:
  2201 ;;		line 294 in file "lcd_20.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;  lcd_data        1    wreg     const unsigned char 
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;  lcd_data        1   12[COMMON] const unsigned char 
  2206 ;; Return value:  Size  Location     Type
  2207 ;;                  1    wreg      void 
  2208 ;; Registers used:
  2209 ;;		wreg, status,2, status,0, pclath, cstack
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2215 ;;      Params:         0       0       0       0       0
  2216 ;;      Locals:         1       0       0       0       0
  2217 ;;      Temps:          0       0       0       0       0
  2218 ;;      Totals:         1       0       0       0       0
  2219 ;;Total ram usage:        1 bytes
  2220 ;; Hardware stack levels used:    1
  2221 ;; Hardware stack levels required when called:    4
  2222 ;; This function calls:
  2223 ;;		_Check_LCD_Busy
  2224 ;;		_LCD_Write_Pulse
  2225 ;; This function is called by:
  2226 ;;		_Data_Str_LCD_Disp
  2227 ;; This function uses a non-reentrant model
  2228 ;;
  2229                           
  2230                           
  2231                           ;psect for function _Write_LCD_Data
  2232  0279                     _Write_LCD_Data:	
  2233                           
  2234                           ;incstack = 0
  2235                           ; Regs used in _Write_LCD_Data: [wreg+status,2+status,0+pclath+cstack]
  2236                           ;Write_LCD_Data@lcd_data stored from wreg
  2237  0279  00FC               	movwf	Write_LCD_Data@lcd_data
  2238                           
  2239                           ;lcd_20.c: 296: Check_LCD_Busy();
  2240  027A  120A  118A  23B6  120A  118A  	fcall	_Check_LCD_Busy
  2241                           
  2242                           ;lcd_20.c: 297: TRISC = 0x00;
  2243  027F  1683               	bsf	3,5	;RP0=1, select bank1
  2244  0280  1303               	bcf	3,6	;RP1=0, select bank1
  2245  0281  0187               	clrf	7	;volatile
  2246                           
  2247                           ;lcd_20.c: 298: PORTC = 0x00;
  2248  0282  1283               	bcf	3,5	;RP0=0, select bank0
  2249  0283  1303               	bcf	3,6	;RP1=0, select bank0
  2250  0284  0187               	clrf	7	;volatile
  2251                           
  2252                           ;lcd_20.c: 299: RD1 = 0;
  2253  0285  1088               	bcf	8,1	;volatile
  2254                           
  2255                           ;lcd_20.c: 300: RD0 = 1;
  2256  0286  1408               	bsf	8,0	;volatile
  2257                           
  2258                           ;lcd_20.c: 301: PORTC = lcd_data;
  2259  0287  087C               	movf	Write_LCD_Data@lcd_data,w
  2260  0288  0087               	movwf	7	;volatile
  2261                           
  2262                           ;lcd_20.c: 302: LCD_Write_Pulse();
  2263  0289  120A  118A  22C8   	fcall	_LCD_Write_Pulse
  2264  028C  0008               	return
  2265  028D                     __end_of_Write_LCD_Data:	
  2266                           
  2267                           	psect	text8
  2268  02E7                     __ptext8:	
  2269 ;; *************** function _LCD_Line_Select *****************
  2270 ;; Defined at:
  2271 ;;		line 316 in file "lcd_20.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;  line            2    0[BANK0 ] const unsigned int 
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;		None
  2276 ;; Return value:  Size  Location     Type
  2277 ;;                  1    wreg      void 
  2278 ;; Registers used:
  2279 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2280 ;; Tracked objects:
  2281 ;;		On entry : 0/0
  2282 ;;		On exit  : 0/0
  2283 ;;		Unchanged: 0/0
  2284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2285 ;;      Params:         0       2       0       0       0
  2286 ;;      Locals:         0       0       0       0       0
  2287 ;;      Temps:          0       0       0       0       0
  2288 ;;      Totals:         0       2       0       0       0
  2289 ;;Total ram usage:        2 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:    5
  2292 ;; This function calls:
  2293 ;;		_Write_LCD_Command
  2294 ;; This function is called by:
  2295 ;;		_Data_Str_LCD_Disp
  2296 ;; This function uses a non-reentrant model
  2297 ;;
  2298                           
  2299                           
  2300                           ;psect for function _LCD_Line_Select
  2301  02E7                     _LCD_Line_Select:	
  2302                           
  2303                           ;lcd_20.c: 318: switch(line)
  2304                           
  2305                           ;incstack = 0
  2306                           ; Regs used in _LCD_Line_Select: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2307  02E7  2AF8               	goto	l1122
  2308  02E8                     l1116:	
  2309                           ;lcd_20.c: 319: {
  2310                           ;lcd_20.c: 321: case (1U):
  2311                           
  2312                           
  2313                           ;lcd_20.c: 322: Write_LCD_Command((0X80));
  2314  02E8  3080               	movlw	128
  2315  02E9  00FC               	movwf	Write_LCD_Command@lcd_cmd
  2316  02EA  3000               	movlw	0
  2317  02EB  00FD               	movwf	Write_LCD_Command@lcd_cmd+1
  2318  02EC  120A  118A  2266   	fcall	_Write_LCD_Command
  2319                           
  2320                           ;lcd_20.c: 323: break;
  2321  02EF  0008               	return
  2322  02F0                     l1118:	
  2323                           ;lcd_20.c: 325: case (2U):
  2324                           
  2325                           
  2326                           ;lcd_20.c: 326: Write_LCD_Command((0xC0));
  2327  02F0  30C0               	movlw	192
  2328  02F1  00FC               	movwf	Write_LCD_Command@lcd_cmd
  2329  02F2  3000               	movlw	0
  2330  02F3  00FD               	movwf	Write_LCD_Command@lcd_cmd+1
  2331  02F4  120A  118A  2266   	fcall	_Write_LCD_Command
  2332                           
  2333                           ;lcd_20.c: 328: }
  2334                           
  2335                           ;lcd_20.c: 327: break;
  2336  02F7  0008               	return
  2337  02F8                     l1122:	
  2338                           
  2339                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2340                           ; Switch size 1, requested type "space"
  2341                           ; Number of cases is 1, Range of values is 0 to 0
  2342                           ; switch strategies available:
  2343                           ; Name         Instructions Cycles
  2344                           ; simple_byte            4     3 (average)
  2345                           ; direct_byte           11     8 (fixed)
  2346                           ; jumptable            260     6 (fixed)
  2347                           ;	Chosen strategy is simple_byte
  2348  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  2349  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  2350  02FA  0847               	movf	LCD_Line_Select@line+1,w
  2351  02FB  3A00               	xorlw	0	; case 0
  2352  02FC  1903               	skipnz
  2353  02FD  2AFF               	goto	l1436
  2354  02FE  2B07               	goto	l158
  2355  02FF                     l1436:	
  2356                           
  2357                           ; Switch size 1, requested type "space"
  2358                           ; Number of cases is 2, Range of values is 1 to 2
  2359                           ; switch strategies available:
  2360                           ; Name         Instructions Cycles
  2361                           ; simple_byte            7     4 (average)
  2362                           ; direct_byte           17    11 (fixed)
  2363                           ; jumptable            263     9 (fixed)
  2364                           ;	Chosen strategy is simple_byte
  2365  02FF  0846               	movf	LCD_Line_Select@line,w
  2366  0300  3A01               	xorlw	1	; case 1
  2367  0301  1903               	skipnz
  2368  0302  2AE8               	goto	l1116
  2369  0303  3A03               	xorlw	3	; case 2
  2370  0304  1903               	skipnz
  2371  0305  2AF0               	goto	l1118
  2372  0306  2B07               	goto	l158
  2373  0307                     l158:	
  2374  0307  0008               	return
  2375  0308                     __end_of_LCD_Line_Select:	
  2376                           
  2377                           	psect	text9
  2378  03E7                     __ptext9:	
  2379 ;; *************** function _LCD_Init *****************
  2380 ;; Defined at:
  2381 ;;		line 344 in file "lcd_20.c"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;		None
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;		None
  2386 ;; Return value:  Size  Location     Type
  2387 ;;                  1    wreg      void 
  2388 ;; Registers used:
  2389 ;;		wreg, status,2, status,0, pclath, cstack
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2395 ;;      Params:         0       0       0       0       0
  2396 ;;      Locals:         0       0       0       0       0
  2397 ;;      Temps:          0       0       0       0       0
  2398 ;;      Totals:         0       0       0       0       0
  2399 ;;Total ram usage:        0 bytes
  2400 ;; Hardware stack levels used:    1
  2401 ;; Hardware stack levels required when called:    5
  2402 ;; This function calls:
  2403 ;;		_Delay_Time_By_Count
  2404 ;;		_Write_LCD_Command
  2405 ;;		_Write_LCD_Command_Cannot_Check_BF
  2406 ;; This function is called by:
  2407 ;;		_main
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411                           
  2412                           ;psect for function _LCD_Init
  2413  03E7                     _LCD_Init:	
  2414                           
  2415                           ;lcd_20.c: 347: Delay_Time_By_Count(15000UL);
  2416                           
  2417                           ;incstack = 0
  2418                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  2419  03E7  3000               	movlw	0
  2420  03E8  00F3               	movwf	Delay_Time_By_Count@time_delay+3
  2421  03E9  3000               	movlw	0
  2422  03EA  00F2               	movwf	Delay_Time_By_Count@time_delay+2
  2423  03EB  303A               	movlw	58
  2424  03EC  00F1               	movwf	Delay_Time_By_Count@time_delay+1
  2425  03ED  3098               	movlw	152
  2426  03EE  00F0               	movwf	Delay_Time_By_Count@time_delay
  2427  03EF  120A  118A  2308  120A  118A  	fcall	_Delay_Time_By_Count
  2428                           
  2429                           ;lcd_20.c: 348: Write_LCD_Command_Cannot_Check_BF(0x30);
  2430  03F4  3030               	movlw	48
  2431  03F5  00F8               	movwf	Write_LCD_Command_Cannot_Check_BF@lcd_cmd
  2432  03F6  3000               	movlw	0
  2433  03F7  00F9               	movwf	Write_LCD_Command_Cannot_Check_BF@lcd_cmd+1
  2434  03F8  120A  118A  224B  120A  118A  	fcall	_Write_LCD_Command_Cannot_Check_BF
  2435                           
  2436                           ;lcd_20.c: 350: Delay_Time_By_Count(4100UL);
  2437  03FD  3000               	movlw	0
  2438  03FE  00F3               	movwf	Delay_Time_By_Count@time_delay+3
  2439  03FF  3000               	movlw	0
  2440  0400  00F2               	movwf	Delay_Time_By_Count@time_delay+2
  2441  0401  3010               	movlw	16
  2442  0402  00F1               	movwf	Delay_Time_By_Count@time_delay+1
  2443  0403  3004               	movlw	4
  2444  0404  00F0               	movwf	Delay_Time_By_Count@time_delay
  2445  0405  120A  118A  2308  120A  118A  	fcall	_Delay_Time_By_Count
  2446                           
  2447                           ;lcd_20.c: 351: Write_LCD_Command_Cannot_Check_BF(0x30);
  2448  040A  3030               	movlw	48
  2449  040B  00F8               	movwf	Write_LCD_Command_Cannot_Check_BF@lcd_cmd
  2450  040C  3000               	movlw	0
  2451  040D  00F9               	movwf	Write_LCD_Command_Cannot_Check_BF@lcd_cmd+1
  2452  040E  120A  118A  224B  120A  118A  	fcall	_Write_LCD_Command_Cannot_Check_BF
  2453                           
  2454                           ;lcd_20.c: 353: Delay_Time_By_Count(100);
  2455  0413  3000               	movlw	0
  2456  0414  00F3               	movwf	Delay_Time_By_Count@time_delay+3
  2457  0415  3000               	movlw	0
  2458  0416  00F2               	movwf	Delay_Time_By_Count@time_delay+2
  2459  0417  3000               	movlw	0
  2460  0418  00F1               	movwf	Delay_Time_By_Count@time_delay+1
  2461  0419  3064               	movlw	100
  2462  041A  00F0               	movwf	Delay_Time_By_Count@time_delay
  2463  041B  120A  118A  2308  120A  118A  	fcall	_Delay_Time_By_Count
  2464                           
  2465                           ;lcd_20.c: 354: Write_LCD_Command_Cannot_Check_BF(0x30);
  2466  0420  3030               	movlw	48
  2467  0421  00F8               	movwf	Write_LCD_Command_Cannot_Check_BF@lcd_cmd
  2468  0422  3000               	movlw	0
  2469  0423  00F9               	movwf	Write_LCD_Command_Cannot_Check_BF@lcd_cmd+1
  2470  0424  120A  118A  224B  120A  118A  	fcall	_Write_LCD_Command_Cannot_Check_BF
  2471                           
  2472                           ;lcd_20.c: 355: Write_LCD_Command(0x38);
  2473  0429  3038               	movlw	56
  2474  042A  00FC               	movwf	Write_LCD_Command@lcd_cmd
  2475  042B  3000               	movlw	0
  2476  042C  00FD               	movwf	Write_LCD_Command@lcd_cmd+1
  2477  042D  120A  118A  2266  120A  118A  	fcall	_Write_LCD_Command
  2478                           
  2479                           ;lcd_20.c: 356: Write_LCD_Command(0x01);
  2480  0432  3001               	movlw	1
  2481  0433  00FC               	movwf	Write_LCD_Command@lcd_cmd
  2482  0434  3000               	movlw	0
  2483  0435  00FD               	movwf	Write_LCD_Command@lcd_cmd+1
  2484  0436  120A  118A  2266  120A  118A  	fcall	_Write_LCD_Command
  2485                           
  2486                           ;lcd_20.c: 357: Write_LCD_Command(0x0C);
  2487  043B  300C               	movlw	12
  2488  043C  00FC               	movwf	Write_LCD_Command@lcd_cmd
  2489  043D  3000               	movlw	0
  2490  043E  00FD               	movwf	Write_LCD_Command@lcd_cmd+1
  2491  043F  120A  118A  2266  120A  118A  	fcall	_Write_LCD_Command
  2492                           
  2493                           ;lcd_20.c: 358: Write_LCD_Command(0x06);
  2494  0444  3006               	movlw	6
  2495  0445  00FC               	movwf	Write_LCD_Command@lcd_cmd
  2496  0446  3000               	movlw	0
  2497  0447  00FD               	movwf	Write_LCD_Command@lcd_cmd+1
  2498  0448  120A  118A  2266   	fcall	_Write_LCD_Command
  2499  044B  0008               	return
  2500  044C                     __end_of_LCD_Init:	
  2501                           
  2502                           	psect	text10
  2503  024B                     __ptext10:	
  2504 ;; *************** function _Write_LCD_Command_Cannot_Check_BF *****************
  2505 ;; Defined at:
  2506 ;;		line 260 in file "lcd_20.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;  lcd_cmd         2    8[COMMON] const unsigned int 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;		None
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      void 
  2513 ;; Registers used:
  2514 ;;		wreg, status,2, status,0, pclath, cstack
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2520 ;;      Params:         2       0       0       0       0
  2521 ;;      Locals:         0       0       0       0       0
  2522 ;;      Temps:          0       0       0       0       0
  2523 ;;      Totals:         2       0       0       0       0
  2524 ;;Total ram usage:        2 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; Hardware stack levels required when called:    2
  2527 ;; This function calls:
  2528 ;;		_LCD_Write_Pulse
  2529 ;; This function is called by:
  2530 ;;		_LCD_Init
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           
  2535                           ;psect for function _Write_LCD_Command_Cannot_Check_BF
  2536  024B                     _Write_LCD_Command_Cannot_Check_BF:	
  2537                           
  2538                           ;lcd_20.c: 262: RD1 = 0;
  2539                           
  2540                           ;incstack = 0
  2541                           ; Regs used in _Write_LCD_Command_Cannot_Check_BF: [wreg+status,2+status,0+pclath+cstack
      +                          ]
  2542  024B  1283               	bcf	3,5	;RP0=0, select bank0
  2543  024C  1303               	bcf	3,6	;RP1=0, select bank0
  2544  024D  1088               	bcf	8,1	;volatile
  2545                           
  2546                           ;lcd_20.c: 263: RD0 = 0;
  2547  024E  1008               	bcf	8,0	;volatile
  2548                           
  2549                           ;lcd_20.c: 264: PORTC = lcd_cmd;
  2550  024F  0878               	movf	Write_LCD_Command_Cannot_Check_BF@lcd_cmd,w
  2551  0250  0087               	movwf	7	;volatile
  2552                           
  2553                           ;lcd_20.c: 265: LCD_Write_Pulse();
  2554  0251  120A  118A  22C8   	fcall	_LCD_Write_Pulse
  2555  0254  0008               	return
  2556  0255                     __end_of_Write_LCD_Command_Cannot_Check_BF:	
  2557                           
  2558                           	psect	text11
  2559  0266                     __ptext11:	
  2560 ;; *************** function _Write_LCD_Command *****************
  2561 ;; Defined at:
  2562 ;;		line 284 in file "lcd_20.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;  lcd_cmd         2   12[COMMON] const unsigned int 
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;		None
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  1    wreg      void 
  2569 ;; Registers used:
  2570 ;;		wreg, status,2, status,0, pclath, cstack
  2571 ;; Tracked objects:
  2572 ;;		On entry : 0/0
  2573 ;;		On exit  : 0/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2576 ;;      Params:         2       0       0       0       0
  2577 ;;      Locals:         0       0       0       0       0
  2578 ;;      Temps:          0       0       0       0       0
  2579 ;;      Totals:         2       0       0       0       0
  2580 ;;Total ram usage:        2 bytes
  2581 ;; Hardware stack levels used:    1
  2582 ;; Hardware stack levels required when called:    4
  2583 ;; This function calls:
  2584 ;;		_Check_LCD_Busy
  2585 ;;		_LCD_Write_Pulse
  2586 ;; This function is called by:
  2587 ;;		_LCD_Line_Select
  2588 ;;		_LCD_Init
  2589 ;; This function uses a non-reentrant model
  2590 ;;
  2591                           
  2592                           
  2593                           ;psect for function _Write_LCD_Command
  2594  0266                     _Write_LCD_Command:	
  2595                           
  2596                           ;lcd_20.c: 286: Check_LCD_Busy();
  2597                           
  2598                           ;incstack = 0
  2599                           ; Regs used in _Write_LCD_Command: [wreg+status,2+status,0+pclath+cstack]
  2600  0266  120A  118A  23B6  120A  118A  	fcall	_Check_LCD_Busy
  2601                           
  2602                           ;lcd_20.c: 287: TRISC = 0x00;
  2603  026B  1683               	bsf	3,5	;RP0=1, select bank1
  2604  026C  1303               	bcf	3,6	;RP1=0, select bank1
  2605  026D  0187               	clrf	7	;volatile
  2606                           
  2607                           ;lcd_20.c: 288: PORTC = 0x00;
  2608  026E  1283               	bcf	3,5	;RP0=0, select bank0
  2609  026F  1303               	bcf	3,6	;RP1=0, select bank0
  2610  0270  0187               	clrf	7	;volatile
  2611                           
  2612                           ;lcd_20.c: 289: RD1 = 0;
  2613  0271  1088               	bcf	8,1	;volatile
  2614                           
  2615                           ;lcd_20.c: 290: RD0 = 0;
  2616  0272  1008               	bcf	8,0	;volatile
  2617                           
  2618                           ;lcd_20.c: 291: PORTC = lcd_cmd;
  2619  0273  087C               	movf	Write_LCD_Command@lcd_cmd,w
  2620  0274  0087               	movwf	7	;volatile
  2621                           
  2622                           ;lcd_20.c: 292: LCD_Write_Pulse();
  2623  0275  120A  118A  22C8   	fcall	_LCD_Write_Pulse
  2624  0278  0008               	return
  2625  0279                     __end_of_Write_LCD_Command:	
  2626                           
  2627                           	psect	text12
  2628  03B6                     __ptext12:	
  2629 ;; *************** function _Check_LCD_Busy *****************
  2630 ;; Defined at:
  2631 ;;		line 268 in file "lcd_20.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;		None
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;		None
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  1    wreg      void 
  2638 ;; Registers used:
  2639 ;;		wreg, status,2, status,0, pclath, cstack
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2645 ;;      Params:         0       0       0       0       0
  2646 ;;      Locals:         0       0       0       0       0
  2647 ;;      Temps:          0       0       0       0       0
  2648 ;;      Totals:         0       0       0       0       0
  2649 ;;Total ram usage:        0 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:    3
  2652 ;; This function calls:
  2653 ;;		_Delay_Time_By_Count
  2654 ;;		_LCD_Read_Pulse
  2655 ;;		_Read_LCD_Command
  2656 ;; This function is called by:
  2657 ;;		_Write_LCD_Command
  2658 ;;		_Write_LCD_Data
  2659 ;; This function uses a non-reentrant model
  2660 ;;
  2661                           
  2662                           
  2663                           ;psect for function _Check_LCD_Busy
  2664  03B6                     _Check_LCD_Busy:	
  2665                           
  2666                           ;lcd_20.c: 270: TRISC = 0xFF;
  2667                           
  2668                           ;incstack = 0
  2669                           ; Regs used in _Check_LCD_Busy: [wreg+status,2+status,0+pclath+cstack]
  2670  03B6  30FF               	movlw	255
  2671  03B7  1683               	bsf	3,5	;RP0=1, select bank1
  2672  03B8  1303               	bcf	3,6	;RP1=0, select bank1
  2673  03B9  0087               	movwf	7	;volatile
  2674                           
  2675                           ;lcd_20.c: 271: PORTC = 0x00;
  2676  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  2677  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  2678  03BC  0187               	clrf	7	;volatile
  2679                           
  2680                           ;lcd_20.c: 272: RD1 = 1;
  2681  03BD  1488               	bsf	8,1	;volatile
  2682                           
  2683                           ;lcd_20.c: 273: RD0 = 0;
  2684  03BE  1008               	bcf	8,0	;volatile
  2685  03BF                     l133:	
  2686                           ;lcd_20.c: 276: while(((read_command = Read_LCD_Command()) & 0x80) == 0x80)
  2687                           
  2688  03BF  120A  118A  2255  120A  118A  	fcall	_Read_LCD_Command
  2689  03C4  0879               	movf	?_Read_LCD_Command+1,w
  2690  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  2691  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  2692  03C7  00A5               	movwf	_read_command+1
  2693  03C8  0878               	movf	?_Read_LCD_Command,w
  2694  03C9  00A4               	movwf	_read_command
  2695  03CA  1FA4               	btfss	_read_command,7
  2696  03CB  0008               	return
  2697                           
  2698                           ;lcd_20.c: 277: {
  2699                           ;lcd_20.c: 278: LCD_Read_Pulse();
  2700  03CC  120A  118A  22A9  120A  118A  	fcall	_LCD_Read_Pulse
  2701                           
  2702                           ;lcd_20.c: 279: LCD_Read_Pulse();
  2703  03D1  120A  118A  22A9  120A  118A  	fcall	_LCD_Read_Pulse
  2704                           
  2705                           ;lcd_20.c: 280: RD2 = 0;
  2706  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  2707  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  2708  03D8  1108               	bcf	8,2	;volatile
  2709                           
  2710                           ;lcd_20.c: 281: Delay_Time_By_Count((1000ul));
  2711  03D9  3000               	movlw	0
  2712  03DA  00F3               	movwf	Delay_Time_By_Count@time_delay+3
  2713  03DB  3000               	movlw	0
  2714  03DC  00F2               	movwf	Delay_Time_By_Count@time_delay+2
  2715  03DD  3003               	movlw	3
  2716  03DE  00F1               	movwf	Delay_Time_By_Count@time_delay+1
  2717  03DF  30E8               	movlw	232
  2718  03E0  00F0               	movwf	Delay_Time_By_Count@time_delay
  2719  03E1  120A  118A  2308  120A  118A  	fcall	_Delay_Time_By_Count
  2720  03E6  2BBF               	goto	l133
  2721  03E7                     __end_of_Check_LCD_Busy:	
  2722                           
  2723                           	psect	text13
  2724  0255                     __ptext13:	
  2725 ;; *************** function _Read_LCD_Command *****************
  2726 ;; Defined at:
  2727 ;;		line 309 in file "lcd_20.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;		None
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;		None
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  2    8[COMMON] unsigned int 
  2734 ;; Registers used:
  2735 ;;		wreg, status,2, status,0, pclath, cstack
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2741 ;;      Params:         2       0       0       0       0
  2742 ;;      Locals:         0       0       0       0       0
  2743 ;;      Temps:          2       0       0       0       0
  2744 ;;      Totals:         4       0       0       0       0
  2745 ;;Total ram usage:        4 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    2
  2748 ;; This function calls:
  2749 ;;		_LCD_Write_Pulse
  2750 ;; This function is called by:
  2751 ;;		_Check_LCD_Busy
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           
  2756                           ;psect for function _Read_LCD_Command
  2757  0255                     _Read_LCD_Command:	
  2758                           
  2759                           ;lcd_20.c: 311: LCD_Write_Pulse();
  2760                           
  2761                           ;incstack = 0
  2762                           ; Regs used in _Read_LCD_Command: [wreg+status,2+status,0+pclath+cstack]
  2763  0255  120A  118A  22C8   	fcall	_LCD_Write_Pulse
  2764                           
  2765                           ;lcd_20.c: 312: read_command = PORTC;
  2766  0258  1283               	bcf	3,5	;RP0=0, select bank0
  2767  0259  1303               	bcf	3,6	;RP1=0, select bank0
  2768  025A  0807               	movf	7,w	;volatile
  2769  025B  00FA               	movwf	??_Read_LCD_Command
  2770  025C  01FB               	clrf	??_Read_LCD_Command+1
  2771  025D  087A               	movf	??_Read_LCD_Command,w
  2772  025E  00A4               	movwf	_read_command
  2773  025F  087B               	movf	??_Read_LCD_Command+1,w
  2774  0260  00A5               	movwf	_read_command+1
  2775                           
  2776                           ;lcd_20.c: 313: return read_command;
  2777  0261  0825               	movf	_read_command+1,w
  2778  0262  00F9               	movwf	?_Read_LCD_Command+1
  2779  0263  0824               	movf	_read_command,w
  2780  0264  00F8               	movwf	?_Read_LCD_Command
  2781  0265  0008               	return
  2782  0266                     __end_of_Read_LCD_Command:	
  2783                           
  2784                           	psect	text14
  2785  02C8                     __ptext14:	
  2786 ;; *************** function _LCD_Write_Pulse *****************
  2787 ;; Defined at:
  2788 ;;		line 246 in file "lcd_20.c"
  2789 ;; Parameters:    Size  Location     Type
  2790 ;;		None
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;		None
  2793 ;; Return value:  Size  Location     Type
  2794 ;;                  1    wreg      void 
  2795 ;; Registers used:
  2796 ;;		wreg, status,2, status,0, pclath, cstack
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2802 ;;      Params:         0       0       0       0       0
  2803 ;;      Locals:         0       0       0       0       0
  2804 ;;      Temps:          0       0       0       0       0
  2805 ;;      Totals:         0       0       0       0       0
  2806 ;;Total ram usage:        0 bytes
  2807 ;; Hardware stack levels used:    1
  2808 ;; Hardware stack levels required when called:    1
  2809 ;; This function calls:
  2810 ;;		_Delay_Time_By_Count
  2811 ;; This function is called by:
  2812 ;;		_Write_LCD_Command_Cannot_Check_BF
  2813 ;;		_Write_LCD_Command
  2814 ;;		_Write_LCD_Data
  2815 ;;		_Read_LCD_Command
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           
  2820                           ;psect for function _LCD_Write_Pulse
  2821  02C8                     _LCD_Write_Pulse:	
  2822                           
  2823                           ;lcd_20.c: 248: RD2 = 1;
  2824                           
  2825                           ;incstack = 0
  2826                           ; Regs used in _LCD_Write_Pulse: [wreg+status,2+status,0+pclath+cstack]
  2827  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  2828  02C9  1303               	bcf	3,6	;RP1=0, select bank0
  2829  02CA  1508               	bsf	8,2	;volatile
  2830                           
  2831                           ;lcd_20.c: 249: Delay_Time_By_Count((1000ul));
  2832  02CB  3000               	movlw	0
  2833  02CC  00F3               	movwf	Delay_Time_By_Count@time_delay+3
  2834  02CD  3000               	movlw	0
  2835  02CE  00F2               	movwf	Delay_Time_By_Count@time_delay+2
  2836  02CF  3003               	movlw	3
  2837  02D0  00F1               	movwf	Delay_Time_By_Count@time_delay+1
  2838  02D1  30E8               	movlw	232
  2839  02D2  00F0               	movwf	Delay_Time_By_Count@time_delay
  2840  02D3  120A  118A  2308  120A  118A  	fcall	_Delay_Time_By_Count
  2841                           
  2842                           ;lcd_20.c: 250: RD2 = 0;
  2843  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  2844  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  2845  02DA  1108               	bcf	8,2	;volatile
  2846                           
  2847                           ;lcd_20.c: 251: Delay_Time_By_Count((1000ul));
  2848  02DB  3000               	movlw	0
  2849  02DC  00F3               	movwf	Delay_Time_By_Count@time_delay+3
  2850  02DD  3000               	movlw	0
  2851  02DE  00F2               	movwf	Delay_Time_By_Count@time_delay+2
  2852  02DF  3003               	movlw	3
  2853  02E0  00F1               	movwf	Delay_Time_By_Count@time_delay+1
  2854  02E1  30E8               	movlw	232
  2855  02E2  00F0               	movwf	Delay_Time_By_Count@time_delay
  2856  02E3  120A  118A  2308   	fcall	_Delay_Time_By_Count
  2857  02E6  0008               	return
  2858  02E7                     __end_of_LCD_Write_Pulse:	
  2859                           
  2860                           	psect	text15
  2861  02A9                     __ptext15:	
  2862 ;; *************** function _LCD_Read_Pulse *****************
  2863 ;; Defined at:
  2864 ;;		line 253 in file "lcd_20.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;		None
  2867 ;; Auto vars:     Size  Location     Type
  2868 ;;		None
  2869 ;; Return value:  Size  Location     Type
  2870 ;;                  1    wreg      void 
  2871 ;; Registers used:
  2872 ;;		wreg, status,2, status,0, pclath, cstack
  2873 ;; Tracked objects:
  2874 ;;		On entry : 0/0
  2875 ;;		On exit  : 0/0
  2876 ;;		Unchanged: 0/0
  2877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2878 ;;      Params:         0       0       0       0       0
  2879 ;;      Locals:         0       0       0       0       0
  2880 ;;      Temps:          0       0       0       0       0
  2881 ;;      Totals:         0       0       0       0       0
  2882 ;;Total ram usage:        0 bytes
  2883 ;; Hardware stack levels used:    1
  2884 ;; Hardware stack levels required when called:    1
  2885 ;; This function calls:
  2886 ;;		_Delay_Time_By_Count
  2887 ;; This function is called by:
  2888 ;;		_Check_LCD_Busy
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           
  2893                           ;psect for function _LCD_Read_Pulse
  2894  02A9                     _LCD_Read_Pulse:	
  2895                           
  2896                           ;lcd_20.c: 255: RD2 = 0;
  2897                           
  2898                           ;incstack = 0
  2899                           ; Regs used in _LCD_Read_Pulse: [wreg+status,2+status,0+pclath+cstack]
  2900  02A9  1283               	bcf	3,5	;RP0=0, select bank0
  2901  02AA  1303               	bcf	3,6	;RP1=0, select bank0
  2902  02AB  1108               	bcf	8,2	;volatile
  2903                           
  2904                           ;lcd_20.c: 256: Delay_Time_By_Count((1000ul));
  2905  02AC  3000               	movlw	0
  2906  02AD  00F3               	movwf	Delay_Time_By_Count@time_delay+3
  2907  02AE  3000               	movlw	0
  2908  02AF  00F2               	movwf	Delay_Time_By_Count@time_delay+2
  2909  02B0  3003               	movlw	3
  2910  02B1  00F1               	movwf	Delay_Time_By_Count@time_delay+1
  2911  02B2  30E8               	movlw	232
  2912  02B3  00F0               	movwf	Delay_Time_By_Count@time_delay
  2913  02B4  120A  118A  2308  120A  118A  	fcall	_Delay_Time_By_Count
  2914                           
  2915                           ;lcd_20.c: 257: RD2 = 1;
  2916  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  2917  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  2918  02BB  1508               	bsf	8,2	;volatile
  2919                           
  2920                           ;lcd_20.c: 258: Delay_Time_By_Count((1000ul));
  2921  02BC  3000               	movlw	0
  2922  02BD  00F3               	movwf	Delay_Time_By_Count@time_delay+3
  2923  02BE  3000               	movlw	0
  2924  02BF  00F2               	movwf	Delay_Time_By_Count@time_delay+2
  2925  02C0  3003               	movlw	3
  2926  02C1  00F1               	movwf	Delay_Time_By_Count@time_delay+1
  2927  02C2  30E8               	movlw	232
  2928  02C3  00F0               	movwf	Delay_Time_By_Count@time_delay
  2929  02C4  120A  118A  2308   	fcall	_Delay_Time_By_Count
  2930  02C7  0008               	return
  2931  02C8                     __end_of_LCD_Read_Pulse:	
  2932                           
  2933                           	psect	text16
  2934  0308                     __ptext16:	
  2935 ;; *************** function _Delay_Time_By_Count *****************
  2936 ;; Defined at:
  2937 ;;		line 305 in file "lcd_20.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;  time_delay      4    0[COMMON] unsigned long 
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;		None
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      void 
  2944 ;; Registers used:
  2945 ;;		wreg, status,2, status,0
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2951 ;;      Params:         4       0       0       0       0
  2952 ;;      Locals:         0       0       0       0       0
  2953 ;;      Temps:          4       0       0       0       0
  2954 ;;      Totals:         8       0       0       0       0
  2955 ;;Total ram usage:        8 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		_LCD_Write_Pulse
  2961 ;;		_LCD_Read_Pulse
  2962 ;;		_Check_LCD_Busy
  2963 ;;		_LCD_Init
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           
  2968                           ;psect for function _Delay_Time_By_Count
  2969  0308                     _Delay_Time_By_Count:	
  2970  0308                     l1052:	
  2971                           ;lcd_20.c: 307: while(time_delay--);
  2972                           
  2973                           ;incstack = 0
  2974                           ; Regs used in _Delay_Time_By_Count: [wreg+status,2+status,0]
  2975                           
  2976  0308  3001               	movlw	1
  2977  0309  00F4               	movwf	??_Delay_Time_By_Count
  2978  030A  3000               	movlw	0
  2979  030B  00F5               	movwf	??_Delay_Time_By_Count+1
  2980  030C  3000               	movlw	0
  2981  030D  00F6               	movwf	??_Delay_Time_By_Count+2
  2982  030E  3000               	movlw	0
  2983  030F  00F7               	movwf	??_Delay_Time_By_Count+3
  2984  0310  0874               	movf	??_Delay_Time_By_Count,w
  2985  0311  02F0               	subwf	Delay_Time_By_Count@time_delay,f
  2986  0312  0875               	movf	??_Delay_Time_By_Count+1,w
  2987  0313  1C03               	skipc
  2988  0314  0F75               	incfsz	??_Delay_Time_By_Count+1,w
  2989  0315  2B17               	goto	u355
  2990  0316  2B18               	goto	u356
  2991  0317                     u355:	
  2992  0317  02F1               	subwf	Delay_Time_By_Count@time_delay+1,f
  2993  0318                     u356:	
  2994  0318  0876               	movf	??_Delay_Time_By_Count+2,w
  2995  0319  1C03               	skipc
  2996  031A  0F76               	incfsz	??_Delay_Time_By_Count+2,w
  2997  031B  2B1D               	goto	u357
  2998  031C  2B1E               	goto	u358
  2999  031D                     u357:	
  3000  031D  02F2               	subwf	Delay_Time_By_Count@time_delay+2,f
  3001  031E                     u358:	
  3002  031E  0877               	movf	??_Delay_Time_By_Count+3,w
  3003  031F  1C03               	skipc
  3004  0320  0F77               	incfsz	??_Delay_Time_By_Count+3,w
  3005  0321  2B23               	goto	u359
  3006  0322  2B24               	goto	u350
  3007  0323                     u359:	
  3008  0323  02F3               	subwf	Delay_Time_By_Count@time_delay+3,f
  3009  0324                     u350:	
  3010  0324  0A70               	incf	Delay_Time_By_Count@time_delay,w
  3011  0325  1D03               	skipz
  3012  0326  2B08               	goto	l1052
  3013  0327  0A71               	incf	Delay_Time_By_Count@time_delay+1,w
  3014  0328  1D03               	skipz
  3015  0329  2B08               	goto	l1052
  3016  032A  0A72               	incf	Delay_Time_By_Count@time_delay+2,w
  3017  032B  1D03               	skipz
  3018  032C  2B08               	goto	l1052
  3019  032D  0A73               	incf	Delay_Time_By_Count@time_delay+3,w
  3020  032E  1903               	btfsc	3,2
  3021  032F  0008               	return
  3022  0330  2B08               	goto	l1052
  3023  0331                     __end_of_Delay_Time_By_Count:	
  3024  007E                     btemp	set	126	;btemp
  3025  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    14
    Data        2
    BSS         98
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      70
    BANK1            80      0      60
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 7
		 -> main@text_str_right(CODE[7]), main@text_str_left(CODE[7]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 7
		 -> main@text_str_right(CODE[7]), main@text_str_left(CODE[7]), 

    memset@p1	PTR void  size(1) Largest target is 16
		 -> lcd_buffer_line2(BANK0[16]), lcd_buffer_line1(BANK0[16]), 

    memset@p	PTR unsigned char  size(1) Largest target is 16
		 -> lcd_buffer_line2(BANK0[16]), lcd_buffer_line1(BANK0[16]), 

    memcpy@d1	PTR void  size(1) Largest target is 30
		 -> LCD_Running_Text_Display_Line2@temp_text_str(BANK1[30]), LCD_Running_Text_Display_Line1@temp_text_str(BANK1[30]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 30
		 -> LCD_Running_Text_Display_Line2@temp_text_str(BANK1[30]), LCD_Running_Text_Display_Line1@temp_text_str(BANK1[30]), 

    memcpy@s1	PTR const void  size(1) Largest target is 7
		 -> main@text_str_right(CODE[7]), main@text_str_left(CODE[7]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 7
		 -> main@text_str_right(CODE[7]), main@text_str_left(CODE[7]), 

    Data_Str_LCD_Disp@lcd_line_buffer	PTR const unsigned char  size(1) Largest target is 16
		 -> lcd_buffer_line2(BANK0[16]), lcd_buffer_line1(BANK0[16]), 

    LCD_Running_Text_Display_Line2@text_str	PTR const unsigned char  size(1) Largest target is 7
		 -> main@text_str_right(CODE[7]), 

    sp__memcpy	PTR void  size(1) Largest target is 30
		 -> LCD_Running_Text_Display_Line2@temp_text_str(BANK1[30]), LCD_Running_Text_Display_Line1@temp_text_str(BANK1[30]), 

    LCD_Running_Text_Display_Line1@text_str	PTR const unsigned char  size(1) Largest target is 7
		 -> main@text_str_left(CODE[7]), 

    sp__memset	PTR void  size(1) Largest target is 16
		 -> lcd_buffer_line2(BANK0[16]), lcd_buffer_line1(BANK0[16]), 


Critical Paths under _main in COMMON

    _LCD_Line_Select->_Write_LCD_Command
    _LCD_Init->_Write_LCD_Command
    _Check_LCD_Busy->_Read_LCD_Command
    _LCD_Write_Pulse->_Delay_Time_By_Count
    _LCD_Read_Pulse->_Delay_Time_By_Count

Critical Paths under _main in BANK0

    _main->_LCD_Running_Text_Display_Line1
    _main->_LCD_Running_Text_Display_Line2
    _LCD_Running_Text_Display_Line2->_Data_Str_LCD_Disp
    _LCD_Running_Text_Display_Line1->_Data_Str_LCD_Disp
    _Data_Str_LCD_Disp->_LCD_Line_Select

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   15793
                                             26 BANK0      4     4      0
                           _LCD_Init
     _LCD_Running_Text_Display_Line1
     _LCD_Running_Text_Display_Line2
                             _memset
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               8     6      2     144
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 (1) _memset                                               7     3      4     362
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _LCD_Running_Text_Display_Line2                      16    10      6    6022
                                             10 BANK0     16    10      6
                  _Data_Str_LCD_Disp
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _LCD_Running_Text_Display_Line1                      16    10      6    6022
                                             10 BANK0     16    10      6
                  _Data_Str_LCD_Disp
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               8     5      3     409
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (2) _Data_Str_LCD_Disp                                    8     4      4    4693
                                              2 BANK0      8     4      4
                    _LCD_Line_Select
                     _Write_LCD_Data
 ---------------------------------------------------------------------------------
 (3) _Write_LCD_Data                                       1     1      0    1806
                                             12 COMMON     1     1      0
                     _Check_LCD_Busy
                    _LCD_Write_Pulse
 ---------------------------------------------------------------------------------
 (3) _LCD_Line_Select                                      2     0      2    2199
                                              0 BANK0      2     0      2
                  _Write_LCD_Command
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0    3197
                _Delay_Time_By_Count
                  _Write_LCD_Command
  _Write_LCD_Command_Cannot_Check_BF
 ---------------------------------------------------------------------------------
 (2) _Write_LCD_Command_Cannot_Check_BF                    2     0      2     627
                                              8 COMMON     2     0      2
                    _LCD_Write_Pulse
 ---------------------------------------------------------------------------------
 (4) _Write_LCD_Command                                    2     0      2    2124
                                             12 COMMON     2     0      2
                     _Check_LCD_Busy
                    _LCD_Write_Pulse
 ---------------------------------------------------------------------------------
 (4) _Check_LCD_Busy                                       0     0      0    1338
                _Delay_Time_By_Count
                     _LCD_Read_Pulse
                   _Read_LCD_Command
 ---------------------------------------------------------------------------------
 (5) _Read_LCD_Command                                     4     2      2     446
                                              8 COMMON     4     2      2
                    _LCD_Write_Pulse
 ---------------------------------------------------------------------------------
 (4) _LCD_Write_Pulse                                      0     0      0     446
                _Delay_Time_By_Count
 ---------------------------------------------------------------------------------
 (5) _LCD_Read_Pulse                                       0     0      0     446
                _Delay_Time_By_Count
 ---------------------------------------------------------------------------------
 (5) _Delay_Time_By_Count                                  8     4      4     446
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _Delay_Time_By_Count
     _Write_LCD_Command
       _Check_LCD_Busy
         _Delay_Time_By_Count
         _LCD_Read_Pulse
           _Delay_Time_By_Count
         _Read_LCD_Command
           _LCD_Write_Pulse
             _Delay_Time_By_Count
       _LCD_Write_Pulse
         _Delay_Time_By_Count
     _Write_LCD_Command_Cannot_Check_BF
       _LCD_Write_Pulse
         _Delay_Time_By_Count
   _LCD_Running_Text_Display_Line1
     _Data_Str_LCD_Disp
       _LCD_Line_Select
         _Write_LCD_Command
           _Check_LCD_Busy
             _Delay_Time_By_Count
             _LCD_Read_Pulse
               _Delay_Time_By_Count
             _Read_LCD_Command
               _LCD_Write_Pulse
                 _Delay_Time_By_Count
           _LCD_Write_Pulse
             _Delay_Time_By_Count
       _Write_LCD_Data
         _Check_LCD_Busy
           _Delay_Time_By_Count
           _LCD_Read_Pulse
             _Delay_Time_By_Count
           _Read_LCD_Command
             _LCD_Write_Pulse
               _Delay_Time_By_Count
         _LCD_Write_Pulse
           _Delay_Time_By_Count
     _memcpy
   _LCD_Running_Text_Display_Line2
     _Data_Str_LCD_Disp
       _LCD_Line_Select
         _Write_LCD_Command
           _Check_LCD_Busy
             _Delay_Time_By_Count
             _LCD_Read_Pulse
               _Delay_Time_By_Count
             _Read_LCD_Command
               _LCD_Write_Pulse
                 _Delay_Time_By_Count
           _LCD_Write_Pulse
             _Delay_Time_By_Count
       _Write_LCD_Data
         _Check_LCD_Busy
           _Delay_Time_By_Count
           _LCD_Read_Pulse
             _Delay_Time_By_Count
           _Read_LCD_Command
             _LCD_Write_Pulse
               _Delay_Time_By_Count
         _LCD_Write_Pulse
           _Delay_Time_By_Count
     _memcpy
   _memset
   _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      3C       7       75.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1E      46       5       87.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      90      12        0.0%
ABS                  0      0      90       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Thu Feb 08 10:56:59 2018

                                            _LCD_Read_Pulse 02A9  
                                                         pc 0002  
                                                        l87 064B  
                                                        fsr 0004  
                                                       l121 07E0  
                                                       l133 03BF  
                                                       l158 0307  
                                                       _RD0 0040  
                                                       _RD1 0041  
                                                       _RD2 0042  
                                                       u350 0324  
                                                       u505 05B9  
                                                       u355 0317  
                                                       u356 0318  
                                                       u357 031D  
                                                       u445 04E7  
                                                       u605 06CB  
                                                       u358 031E  
                                                       u359 0323  
                                                       u455 0506  
                                                       u615 070D  
                                                       u545 060F  
                                                       u625 06EA  
                                                       u395 0371  
                                                       u555 0601  
                                                       u475 0536  
                                                       u635 074E  
                                                       u485 0578  
                                                       u495 0555  
                                                       u575 067C  
                                                       u585 069B  
                                                       u675 07A4  
                                                       u685 0796  
                                                       fsr0 0004  
                                                       indf 0000  
                                         ??_LCD_Write_Pulse 0078  
                                                      l1122 02F8  
                                                      l1202 051B  
                                                      l1052 0308  
                                                      l1116 02E8  
                                                      l1220 0597  
                                                      l1118 02F0  
                                                      l1214 0589  
                                                      l1222 05A0  
                                                      l1302 071E  
                                                      l1310 0735  
                                                      l1224 05A7  
                                                      l1216 0590  
                                                      l1208 0538  
                                                      l1312 073C  
                                                      l1304 0725  
                                                      l1138 0391  
                                                      l1250 0620  
                                                      l1234 05D3  
                                                      l1218 053C  
                                                      l1322 0768  
                                                      l1306 06D1  
                                                      l1252 0627  
                                                      l1244 05EF  
                                                      l1340 07BC  
                                                      l1332 0784  
                                                      l1308 072C  
                                                      l1254 05F7  
                                                      l1238 05DB  
                                                      l1262 063E  
                                                      l1342 078C  
                                                      l1326 0770  
                                                      l1350 07D3  
                                                      l1174 0336  
                                                      l1256 062E  
                                                      l1432 07D8  
                                                      l1344 07C3  
                                                      l1168 0292  
                                                      l1176 0345  
                                                      l1434 0643  
                                                      l1258 0637  
                                                      l1338 07B5  
                                                      l1346 07CC  
                                                      l1290 06B0  
                                                      l1436 02FF  
                                                      l1188 04D5  
                                                      l1276 066A  
                                                      l1198 0508  
                                                      l1286 069D  
                                                      l1296 06CD  
                                                      l1368 048F  
                                                      _main 044C  
               LCD_Running_Text_Display_Line1@temp_text_str 00BE  
                                                      btemp 007E  
                                                      start 0000  
                                    __end_of_LCD_Read_Pulse 02C8  
                                          __end_of_LCD_Init 044C  
                                                     ?_main 0070  
                                                     _PORTC 0007  
                                                     _PORTD 0008  
                                                     _TRISC 0087  
                                                     _TRISD 0088  
                                   __end_of_LCD_Line_Select 0308  
                                                     pclath 000A  
                                                     status 0003  
                                                     wtemp0 007E  
                                   __size_of_Write_LCD_Data 0014  
LCD_Running_Text_Display_Line2@running_text_shift_direction 0054  
                                           ?_LCD_Read_Pulse 0070  
                                           __initialization 07E1  
                                              __end_of_main 04B7  
                LCD_Running_Text_Display_Line1@text_str_len 0050  
                                 __size_of_Read_LCD_Command 0011  
                                  Write_LCD_Command@lcd_cmd 007C  
                  Write_LCD_Command_Cannot_Check_BF@lcd_cmd 0078  
                                                    ??_main 007E  
                    __end_of_LCD_Running_Text_Display_Line1 064C  
                   __size_of_LCD_Running_Text_Display_Line1 0195  
                            _LCD_Running_Text_Display_Line1 04B7  
                    __end_of_LCD_Running_Text_Display_Line2 07E1  
                   __size_of_LCD_Running_Text_Display_Line2 0195  
                            _LCD_Running_Text_Display_Line2 064C  
                               __end_of_Delay_Time_By_Count 0331  
LCD_Running_Text_Display_Line1@running_text_shift_direction 0054  
                                                    _memcpy 0388  
                                                    _memset 028D  
   LCD_Running_Text_Display_Line2@num_gaps_between_text_str 0052  
                                                    _strlen 0331  
                                     main@text_str_left_len 0060  
                                __end_ofmain@text_str_right 0010  
                                          _lcd_buffer_line1 0036  
                                          _lcd_buffer_line2 0026  
                                          ?_LCD_Line_Select 0046  
                                   __end_of__initialization 07FC  
                                                 ?_LCD_Init 0070  
                                            __pcstackCOMMON 0070  
                                              __pidataBANK0 0241  
                                           _LCD_Write_Pulse 02C8  
                LCD_Running_Text_Display_Line2@text_str_len 0050  
       LCD_Running_Text_Display_Line2@cur_char_in_str_index 0020  
                               _line1_text_disp_finish_flag 0065  
                                                __pbssBANK0 0020  
                                                __pbssBANK1 00A0  
                                                ??_LCD_Init 007E  
                                            _Write_LCD_Data 0279  
               LCD_Running_Text_Display_Line2@temp_text_str 00A0  
                                                __pmaintext 044C  
                                          _Read_LCD_Command 0255  
                                                   ?_memcpy 0070  
                 LCD_Running_Text_Display_Line1@cur_lcd_col 005E  
                                                   ?_memset 0070  
                                                   ?_strlen 0070  
                                   __size_of_Check_LCD_Busy 0031  
                                                __stringtab 0003  
                                    __end_of_Write_LCD_Data 028D  
                                          ??_LCD_Read_Pulse 0078  
                                   __end_of_LCD_Write_Pulse 02E7  
                 LCD_Running_Text_Display_Line2@cur_lcd_col 005E  
                                           __size_of_memcpy 002E  
                                           __size_of_memset 001C  
                                                   __ptext1 0331  
                                                   __ptext2 028D  
                                                   __ptext3 064C  
                                                   __ptext4 04B7  
                                                   __ptext5 0388  
                                                   __ptext6 035B  
                                                   __ptext7 0279  
                                                   __ptext8 02E7  
                                                   __ptext9 03E7  
                                           __size_of_strlen 002A  
              LCD_Running_Text_Display_Line2@cur_temp_index 005C  
                                                   clrloop0 0244  
                                      end_of_initialization 07FC  
                                           ?_Write_LCD_Data 0070  
                          ??_LCD_Running_Text_Display_Line1 0056  
                           ?_LCD_Running_Text_Display_Line1 0050  
                          ??_LCD_Running_Text_Display_Line2 0056  
                           ?_LCD_Running_Text_Display_Line2 0050  
                                                   memcpy@d 0075  
                                                   memcpy@n 0071  
                                                   memcpy@s 0076  
                                                   memset@c 0070  
                                                   memset@n 0072  
                                                   memset@p 0075  
                    LCD_Running_Text_Display_Line1@text_str 005B  
                                                   strlen@s 0077  
                    LCD_Running_Text_Display_Line2@text_str 005B  
                                    main@text_str_right_len 0062  
                                         _Data_Str_LCD_Disp 035B  
                          Data_Str_LCD_Disp@lcd_line_buffer 004D  
                                        ?_Data_Str_LCD_Disp 0048  
                                       ??_Data_Str_LCD_Disp 004C  
                                    Write_LCD_Data@lcd_data 007C  
                                          ?_LCD_Write_Pulse 0070  
                                         __size_of_LCD_Init 0065  
                                        main@text_str_right 0009  
                              __size_of_Delay_Time_By_Count 0029  
                                 __end_of_Data_Str_LCD_Disp 0388  
               Data_Str_LCD_Disp@cur_char_in_text_str_index 004E  
                                            __end_of_memcpy 03B6  
                                            __end_of_memset 02A9  
                                            __end_of_strlen 035B  
                                       start_initialization 07E1  
                                            _Check_LCD_Busy 03B6  
                                         _Write_LCD_Command 0266  
                                  __end_of_Read_LCD_Command 0266  
                                        ?_Write_LCD_Command 007C  
                                  __size_of_LCD_Line_Select 0021  
                                       ??_Write_LCD_Command 007E  
                                               __pdataBANK0 0064  
                                                  ??_memcpy 0073  
                                                  ??_memset 0074  
                               _line2_text_disp_finish_flag 0064  
                                                  ??_strlen 0072  
                 __end_of_Write_LCD_Command_Cannot_Check_BF 0255  
                __size_of_Write_LCD_Command_Cannot_Check_BF 000A  
                       ??_Write_LCD_Command_Cannot_Check_BF 007A  
                        ?_Write_LCD_Command_Cannot_Check_BF 0078  
                         _Write_LCD_Command_Cannot_Check_BF 024B  
                                    __end_of_Check_LCD_Busy 03E7  
                                                 ___latbits 0002  
                                             __pcstackBANK0 0046  
                                 __end_of_Write_LCD_Command 0279  
                                              _read_command 0024  
                                                 __pstrings 0003  
                                __size_of_Data_Str_LCD_Disp 002D  
                                           ?_Check_LCD_Busy 0070  
                                          ??_Write_LCD_Data 007C  
                                                  _LCD_Init 03E7  
                      Data_Str_LCD_Disp@lcd_line_buffer_len 0048  
                                                 clear_ram0 0243  
                             Delay_Time_By_Count@time_delay 0070  
                                         ??_LCD_Line_Select 007E  
                                               __stringbase 0008  
                                         main@text_str_left 0010  
                                       _Delay_Time_By_Count 0308  
                                __size_of_Write_LCD_Command 0013  
                                      ?_Delay_Time_By_Count 0070  
                                                 memcpy@tmp 0074  
                                   __size_of_LCD_Read_Pulse 001F  
                                        __end_of__stringtab 0009  
                                 __end_ofmain@text_str_left 0017  
                                                  __ptext10 024B  
                                                  __ptext11 0266  
                                                  __ptext12 03B6  
                                                  __ptext13 0255  
                                                  __ptext14 02C8  
                                                  __ptext15 02A9  
                                                  __ptext16 0308  
                                         ?_Read_LCD_Command 0078  
   LCD_Running_Text_Display_Line1@num_gaps_between_text_str 0052  
                                             __size_of_main 006B  
                                        ??_Read_LCD_Command 007A  
                                     ??_Delay_Time_By_Count 0074  
                                  __size_of_LCD_Write_Pulse 001F  
              LCD_Running_Text_Display_Line1@cur_temp_index 005C  
                                                  memcpy@d1 0077  
                                                  memcpy@s1 0070  
                                                  memset@p1 0076  
                                                 stringcode 0003  
                                     Data_Str_LCD_Disp@line 004A  
                                          ??_Check_LCD_Busy 007C  
       LCD_Running_Text_Display_Line1@cur_char_in_str_index 0022  
                                                  strlen@cp 0076  
                                                  stringdir 0003  
                                                  stringtab 0003  
                                       LCD_Line_Select@line 0046  
                                           _LCD_Line_Select 02E7  
